
#
# \\ CODE - Do not modify it if you don't know what are you doing -_- //
#

options:
	plugin-version: 2.5.0
	setup-prefix: &6SG &8- &c&nSETUP&R &e» &7

import:
	java.io.File
	org.bukkit.Sound
	org.bukkit.Bukkit
	org.bukkit.SkullType
	java.util.ArrayList	
	java.util.Map$Entry	
	java.util.Collections
	org.bukkit.Material		
	org.bukkit.material.MaterialData	
	org.bukkit.inventory.ItemFlag		
	org.bukkit.event.player.PlayerArmorStandManipulateEvent
	org.bukkit.event.player.PlayerInteractEvent	
	ch.njol.skript.variables.Variables		
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType	
	com.leaf.nbt.nbtapi.NBTItem
	com.leaf.nbt.nbtapi.NBTEntity	
	com.leaf.nbt.nbtapi.NBTContainer	

local effect add %string% to nbt of %entity%:
	trigger:
		set {_nbtent} to new NBTEntity(expr-2)
		{_nbtent}.mergeCompound(new NBTContainer(expr-1))

expression %item% with [custom] nbt [tag] %string% [with value %-string%]:
	return type: item
	get:
		if expr-1 is air:
			return
		set {_nbti} to new NBTItem(expr-1)
		if expr-3 is set:
			{_nbti}.setString(expr-2 and expr-3)
		else:		
			{_nbti}.mergeCompound(new NBTContainer(expr-2))
		return {_nbti}.getItem()

local effect (update|1¦place) skull of %offlineplayer% at %location%:
	trigger:
		set {_block} to expression-2.getBlock()
		if parse mark is 1:
			set block at {_block} to player head
		set {_state} to {_block}.getState()
		{_state}.setOwner("%expression-1%")
		{_state}.update()

expression %item% with [leaf] lore %texts%:
	return type: item
	get:
		set {_r} to expr-1
		loop expressions 2:
			set {_lore} to loop-value-1
			add 1 to {_line}			
			set line {_line} of lore of {_r} to colored {_lore}		
		return {_r}		
		
local effect create scoreboard for %player%:	
	trigger:
		if {-sg::cache::TitleManager}.hasScoreboard(expr-1) is true:
			{-sg::cache::TitleManager}.removeScoreboard(expr-1)
		{-sg::cache::TitleManager}.giveScoreboard(expr-1)

local effect delete scoreboard of %player%:	
	trigger:
		{-sg::cache::TitleManager}.removeScoreboard(expr-1)	

local effect set scoreboard title of %player% to %string%:	
	trigger:
		{-sg::cache::TitleManager}.setScoreboardTitle(expr-1 and expr-2)

local effect set scoreboard line %number% of %player% to %string%:	
	trigger:
		{-sg::cache::TitleManager}.setScoreboardValue(expr-2, expr-1 and expr-3)

local expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}

local effect [leaf] set colision of %player% to %boolean%:
	trigger:
		expression-1.spigot().setCollidesWithEntities(expression-2)
		try expression-1.setCollidable(expression-2)

local effect hide %player% [(from|for) %player%]:
	trigger:
		expr-1.hidePlayer(expr-2)

local effect reveal %player% [(to|for|from) %player%]:
	trigger:
		expr-1.showPlayer(expr-2)	

local effect mysql execute %string% with %player%:	
	trigger:
		if expr-1 is "sync":
			execute unsafe "select * from %yaml value ""MySQL.Tablename"" from ""sg.config""% WHERE `uuid` = '%uuid of expr-2%'" in {SG-DB} and store the result in {_output::*}
			if {_output::uuid::1} is not set:
				wait a tick
				execute unsafe "select * from %yaml value ""MySQL.Tablename"" from ""sg.config""% WHERE `username` = '%expr-2%'" in {SG-DB} and store the result in {_output::*}
				if {_output::username::1} is "%expr-2%":
					execute unsafe "UPDATE `%yaml value ""MySQL.Tablename"" from ""sg.config""%` SET `uuid` = '%uuid of expr-2%' WHERE `username` = '%expr-2%'" in {SG-DB}	
					send "%yaml value ""Messages.Prefix"" from ""sg.language""%&aDetected uuid change for %expr-2%." to console
					wait a tick
				else:
					send "%yaml value ""Messages.Prefix"" from ""sg.language""%&aNew Player Joined %expr-2%." to console
					execute unsafe "INSERT INTO `%yaml value ""MySQL.Tablename"" from ""sg.config""%` (`username`, `uuid`) VALUES ('%expr-2%', '%uuid of expr-2%')" in {SG-DB}
					wait a tick
			execute unsafe "select * from %yaml value ""MySQL.Tablename"" from ""sg.config""% WHERE `uuid` = '%uuid of expr-2%'" in {SG-DB} and store the result in {_output::*}						
			loop "coins", "kills", "wins", "deaths", "chests" and "playedgames":
				set {-sg::player::stats::%expr-2%::%loop-value-1%} to {_output::%loop-value-1%::1}
			loop "SomeCosmetic.Selected", "ArrowTrails.Selected", "Spectator.Speed" and "Spectator.Night-Vision":
				set {-sg::player::stats::%expr-2%::Data.%loop-value-1%} to {_output::%loop-value-1%::1}
			set {-sg::player::stats::%expr-2%::Data.ArrowTrails.Bought::*} to {_output::ArrowTrails.Bought::1} split at "||"
			set {-sg::player::stats::%expr-2%::Data.SomeCosmetic.Bought::*} to {_output::SomeCosmetic.Bought::1} split at "||"
		if expr-1 is "update":	
			loop "SomeCosmetic.Bought" and "ArrowTrails.Bought":
				if size of {-sg::player::stats::%expr-2%::Data.%loop-value-1%::*} >= 1:
					set {-sg::player::stats::%expr-2%::Data.%loop-value-1%} to join {-sg::player::stats::%expr-2%::Data.%loop-value-1%::*} with "||"
				else: 
					set {-sg::player::stats::%expr-2%::Data.%loop-value-1%} to 0 	
			loop "coins", "level", "xp" and "xp-need":		
				execute unsafe "UPDATE `%yaml value ""MySQL.Tablename"" from ""sg.config""%` SET `%loop-value-1%`='%{-sg::player::stats::%expr-2%::%loop-value-1%} ? 1%' WHERE `uuid` = '%uuid of expr-2%'" in {SG-DB}	 									
			execute unsafe "UPDATE `%yaml value ""MySQL.Tablename"" from ""sg.config""%` SET `Spectator.Night-Vision`='%{-sg::player::stats::%expr-2%::Data.Spectator.Night-Vision} ? true%', `Spectator.Speed`='%{-sg::player::stats::%expr-2%::Data.Spectator.Speed} ? 0%', `SomeCosmetic.Selected`='%{-sg::player::stats::%expr-2%::Data.SomeCosmetic.Selected} ? 0%', `SomeCosmetic.Bought`='%{-sg::player::stats::%expr-2%::Data.SomeCosmetic.Bought} ? 0%', `ArrowTrails.Bought`='%{-sg::player::stats::%expr-2%::Data.ArrowTrails.Bought} ? 0%', `ArrowTrails.Selected`='%{-sg::player::stats::%expr-2%::Data.ArrowTrails.Selected} ? 0%' WHERE `uuid` = '%uuid of expr-2%'" in {SG-DB}		
			if expr-2 is not online:
				delete {-sg::player::stats::%{_p}%::*}

function sg_stats(t: text, p: player, section: text, amount: number):
	if {_t} is "add" or "give":
		add {_amount} to {-sg::player::stats::%{_p}%::%{_section}%}
	if {_t} is "set":
		set {-sg::player::stats::%{_p}%::%{_section}%} to {_amount}
	if {_t} is "take":
		remove {_amount} from {-sg::player::stats::%{_p}%::%{_section}%}
	if {_t} is "check":		
		mysql execute "sync" with {_p}											
	if {_t} != "check":
		mysql execute "update" with {_p}

function sg_arenaPlayers(arena: string) :: players:
	return {-sg::cache::arena::%{_arena}%::players::alive::*} and {-sg::cache::arena::%{_arena}%::players::spec::*}

function sg_play_player_sound(p: players, sound: text):
	{_p}.playSound(location of {_p}, Sound..yaml value "Sounds.%{_sound}%.Sound" from "sg.config", yaml value "Sounds.%{_sound}%.Volume" from "sg.config" and yaml value "Sounds.%{_sound}%.Pitch" from "sg.config")

function sg_play_arena_sound(arena: text, sound: text):
	loop sg_arenaPlayers({_arena}):
		sg_play_player_sound(loop-value-1, yaml value "Sounds.%{_sound}%.Sound" from "sg.config")

function sg_list(p: player, page: number = 0):
	set {_count} to 0
	set {_slot} to 10
	set metadata "SG-LIST-PAGE" of {_p} to {_page}
	if name of {_p}'s current inventory != yaml value "Arenas-Browser.Menu" from "sg.menus":
		open chest inventory with 6 rows named yaml value "Arenas-Browser.Menu" from "sg.menus" to {_p}
		wait a tick
		make a gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 52 and 53 of {_p} with {-sg::cache::Arenas-Browser.Background.Item::menus} named "&7" to do nothing
		if {_page} = 0:
			make a gui slot 49 of {_p} with {-sg::cache::Arenas-Browser.AutoJoin.Item::menus} to run function sg_findarena({_p}, "Random")
		if size of {-sg::cache::arenas::*} > 28*{_page} + 28:
			make a gui slot 53 of {_p} with {-sg::cache::General.Next-Page.Item::menus} to run function sg_list({_p}, ({_page} + 1))
		if {_page} > 0:
			make a gui slot 45 of {_p} with {-sg::cache::General.Previos-Page.Item::menus} to run function sg_list({_p}, ({_page} - 1))
			make a gui slot 50 of {_p} with {-sg::cache::General.Main-Page.Item::menus} to run function sg_list({_p})
			make a gui slot 48 of {_p} with {-sg::cache::Arenas-Browser.AutoJoin.Item::menus} to run function sg_findarena({_p}, "Random")
	loop {-sg::cache::arenas::*}:
		add 1 to {_count}
		if {_count} > 28*{_page}:
			if {-sg::arena.%loop-value-1%::status} is "WAITING":
				set {_display} to green clay
			if {-sg::arena.%loop-value-1%::status} is "STARTING":
				set {_display} to yellow clay
			if {-sg::arena.%loop-value-1%::status} is "IN-GAME" or "DEATHMATCH":
				set {_display} to red clay
			if {-sg::arena.%loop-value-1%::status} is "RESTARTING":
				set {_display} to red clay
			set {_lore::*} to yaml list "Arenas-Browser.Lore" from "sg.menus"
			set {_maximum} to yaml value "MAX-PLAYERS" from "sg.arena.%loop-value-1%"
			set {_playing} to size of {-sg::cache::arena::%loop-value-1%::players::alive::*}			
			replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%loop-value-1%::status}%" from "sg.language" in {_lore::*}
			replace all "{playing}" with "%{_playing}%" in {_lore::*}	
			replace all "{arena}" with "%loop-value-1%" in {_lore::*}		
			replace all "{max}" with "%{_maximum}%" in {_lore::*}
			if {_playing} > 0:
				make gui slot {_slot} of {_p} with {_playing} of {_display} named "&8" with leaf lore {_lore::*} to run function sg_join_game({_p}, loop-value-1)
			else:
				make gui slot {_slot} of {_p} with {_display} named "&8" with leaf lore {_lore::*} to run function sg_join_game({_p}, loop-value-1)
			add 1 to {_slot}
			if {_slot} is 17 or 26 or 35:
				add 2 to {_slot}
			if {_slot} is 44:
				exit loop
		{_count} = 7, 14, 21 or 29:
			wait a tick
			
function sg_player_replacer(p: player, msg: text) :: text:
	replace all "{player}" with "%{_p}%" in {_msg}
	replace all "{prefix}" with {_p}'s prefix in {_msg}
	replace all "{suffix}" with {_p}'s suffix in {_msg}
	replace all "{display-name}" with {_p}'s displayname in {_msg}
	return {_msg}

function sg_create_board(p: player, board: text):
	set {_wait} to yaml value "Scoreboard.%{_board}%.Update" from "sg.language" parsed as timespan
	add "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f" to {_d::*}	
	create scoreboard for {_p}	
	if {_board} is "LOBBY":
		set scoreboard title of {_p} to yaml value "Scoreboard.LOBBY.Title" from "sg.language"
		while {-sg::cache::player::%{_p}%::state} is "IN-LOBBY":
			set {_slot} to 1
			loop yaml list "Scoreboard.%{_board}%.Lines" from "sg.language":
				set {_score} to sg_player_replacer({_p}, "%loop-value-1%")
				loop "coins", "kills", "wins", "deaths", "chests" and "playedgames":
					replace all "{%loop-value-2%}" with "%{-sg::player::stats::%{_p}%::%loop-value-2%}%" in {_score}
				replace all "{online}" with "%number of all players%" in {_score}
				set scoreboard line {_slot} of {_p} to "%{_d::%{_slot}%}%%colored {_score}%"
				add 1 to {_slot}
			wait {_wait}			
	if {_board} is "WAITING" or "STARTING":		
		set {_arena} to {-sg::cache::player::%{_p}%::arena}
		set {_maximum} to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"	
		while {_arena} is {-sg::cache::player::%{_p}%::arena}:
			set {_slot} to 1
			set {_title} to yaml value "Scoreboard.%{_board}%.Title" from "sg.language"
			if {_board} is {-sg::arena.%{_arena}%::status}:
				if {-sg::cache::arena::%{_arena}%::seconds} <= 9:
					replace all "{game-time}" with "00:0%{-sg::cache::arena::%{_arena}%::seconds}%" in {_title}
					set {-sg::cache::arena::%{_arena}%::timer::format} to "00:0%{-sg::cache::arena::%{_arena}%::seconds}%"
				else:
					replace all "{game-time}" with "00:%{-sg::cache::arena::%{_arena}%::seconds}%" in {_title}
					set {-sg::cache::arena::%{_arena}%::timer::format} to "00:%{-sg::cache::arena::%{_arena}%::seconds}%"
				replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%{_arena}%::status}%" from "sg.language" in {_title}
				set scoreboard title of {_p} to {_title}
				loop yaml list "Scoreboard.%{_board}%.Lines" from "sg.language":
					set {_score} to sg_player_replacer({_p}, "%loop-value-1%")
					replace all "{date}" with "%now%" in {_score}
					replace all "{game-time}" with "%{-sg::cache::arena::%{_arena}%::timer::format}%" in {_score}
					replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%{_arena}%::status}%" from "sg.language" in {_score}
					replace all "{playing}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" in {_score}
					replace all "{spectating}" with "%size of {-sg::cache::arena::%{_arena}%::players::spec::*}%" in {_score}
					replace all "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in {_score}
					replace all "{arena}" with "%{_arena}%" in {_score}
					replace all "{max}" with "%{_maximum}%" in {_score}
					replace all "{kills}" with "%{-sg::cache::arena::%{_arena}%::gamekills::%{_p}%}%" in {_score}
					set scoreboard line {_slot} of {_p} to "%{_d::%{_slot}%}%%colored {_score}%"
					add 1 to {_slot}
			else:
				stop
			wait {_wait}		
	if {_board} is "IN-GAME" or "PRE-DEATHMATCH" or "DEATHMATCH" or "RESTARTING":	
		set {_arena} to {-sg::cache::player::%{_p}%::arena}
		set {_status} to {-sg::arena.%{_arena}%::status}		
		set {_maximum} to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"			
		while {_status} is {-sg::arena.%{-sg::cache::player::%{_p}%::arena}%::status}:
			set {_slot} to 1
			set {_title} to yaml value "Scoreboard.%{_board}%.Title" from "sg.language"
			if {_board} is {-sg::arena.%{_arena}%::status}:
				replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%{_arena}%::status}%" from "sg.language" in {_title}
				replace all "{game-time}" with "%{-sg::cache::arena::%{_arena}%::timer::format}%" in {_title}
				set scoreboard title of {_p} to {_title}
				loop yaml list "Scoreboard.%{_board}%.Lines" from "sg.language":
					set {_score} to sg_player_replacer({_p}, "%loop-value-1%")
					replace all "{date}" with "%now%" in {_score}
					replace all "{game-time}" with "%{-sg::cache::arena::%{_arena}%::timer::format}%" in {_score}
					replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%{_arena}%::status}%" from "sg.language" in {_score}
					replace all "{playing}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" in {_score}
					replace all "{spectating}" with "%size of {-sg::cache::arena::%{_arena}%::players::spec::*}%" in {_score}
					replace all "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in {_score}
					replace all "{arena}" with "%{_arena}%" in {_score}
					replace all "{max}" with "%{_maximum}%" in {_score}
					replace all "{kills}" with "%{-sg::cache::arena::%{_arena}%::gamekills::%{_p}%}%" in {_score}
					set scoreboard line {_slot} of {_p} to "%{_d::%{_slot}%}%%colored {_score}%"
					add 1 to {_slot}
			else:
				stop
			wait {_wait}

function sg_clear_data(p: player):
	delete {-sg::cache::player::%{_p}%::*}

function sg_join_queque(p: player):
	set {-sg::cache::player::%{_p}%::joining} to true
	while {_p} is online:
		{_p}'s gamemode is not spectator:
			set {_p}'s gamemode to spectator
		add 1 to {_int}
		if {_int} = 20 or 40 or 60 or 80 or 150:
			send "Getting stats for %{_p}%..." to console
			send yaml value "Messages.LoadingStats" from "sg.language" to {_p}
		if {_int} = 150:
			sg_stats("check", {_p}, "null", 0)
			set {_int} to 0
		if {-sg::player::stats::%{_p}%::coins} is set:
			delete {-sg::cache::player::%{_p}%::joining}
			sg_join_lobby({_p}, true)
			stop	
		if {-sg::cache::player::%{_p}%::joining} is not set:
			stop
		wait a tick	

function sg_join_lobby(p: player, title: boolean = false):
	sg_clear_data({_p})
	sg_clear_player({_p})
	sg_stats("check", {_p}, "0", 0)
	wait a tick
	if {-sg::player::stats::%{_p}%::coins} is not set:
		sg_join_queque({_p})
		stop
	leaf set colision of {_p} to true
	set {-sg::cache::player::%{_p}%::state} to "IN-LOBBY"
	teleport {_p} to yaml value "LOCATIONS.MAIN-LOBBY" from "sg.data"
	loop "Join-Arenas", "Shop", "Lobby-Leave" and "Custom-Item":
		set slot yaml value "Items.%loop-value-1%.Slot" from "sg.language" of {_p} to {-sg::cache::Items.%loop-value-1%.Item::language}
	sg_create_board({_p}, "LOBBY")
	sg_separe_player({_p})
	if {_title} is true:
		leaf send title yaml value "Titles.Join-Lobby.Title" from "sg.language" with subtitle yaml value "Titles.Join-Lobby.Subtitle" from "sg.language" to {_p} with yaml value "Titles.Join-Lobby.FadeIn" from "sg.language" fadein and yaml value "Titles.Join-Lobby.FadeOut" from "sg.language" fadeout for yaml value "Titles.Join-Lobby.Duration" from "sg.language"

function sg_arena_items(p: player, arena: text):
	set {_p}'s slot yaml value "Items.Leave.Slot" from "sg.language" to {-sg::cache::Items.Leave.Item::language}

function sg_leave(p: player, quit: boolean = false):
	if {-sg::cache::player::%{_p}%::state} is "IN-LOBBY":
		if yaml value "Bungeecord.Enabled" from "sg.config" is false:
			if value "LOCATIONS.LOBBY-LEAVE" from "sg.data" is set:
				teleport {_p} to yaml value "LOCATIONS.LOBBY-LEAVE" from "sg.data"
			if value "LOCATIONS.LOBBY-LEAVE" from "sg.data" is not set:
				if {_quit} is false:
					stop
		if yaml value "Bungeecord.Enabled" from "sg.config" is true:
			if {_quit} is false:
				send {_p} to bungeecord server "%yaml value ""Bungeecord.FallbackServer"" from ""sg.config""%"
				stop	
		sg_separe_player({_p})
		sg_clear_data({_p})
		delete scoreboard of {_p}
		sg_clear_player({_p})
	if {-sg::cache::player::%{_p}%::state} is "IN-GAME":
		set {_arena} to {-sg::cache::player::%{_p}%::arena}
		remove {_p} from {-sg::cache::arena::%{_arena}%::players::alive::*}
		set {_max} to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"
		set {_msg} to sg_player_replacer({_p}, yaml value "Messages.Leave" from "sg.language") 
		send replacer "{playing}" and "{max}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" and "%{_max}%" in {_msg} to sg_arenaPlayers({_arena})
		if {-sg::arena.%{_arena}%::status} is "IN-GAME" or "DEATHMATCH":
			if size of {-sg::cache::arena::%{_arena}%::players::alive::*} = 1:
				sg_winner({_arena})
		sg_update_sign({_arena}) 
	if {-sg::cache::player::%{_p}%::state} is "IN-GAME-SPEC" or "IN-GAME":
		if {-sg::cache::player::%{_p}%::state} is "IN-GAME-SPEC":
			remove {_p} from {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::players::spec::*}
		if {_quit} is false:
			sg_join_lobby({_p})
		if {_quit} is true:
			set {-sg::cache::player::%{_p}%::state} to "IN-LOBBY"
			sg_leave({_p}, true)

function sg_setup_arena(p: player, do: text, arena: text):
	if {_do} is "enter":
		set metadata value "SG-SETUP" of {_p} to {_arena}
		clear {_p}'s inventory
		set slot 0 of {_p} to green clay named "&8&l[&aADD &8&l- &bSPAWNPOINT&8&l]" 
		set slot 1 of {_p} to red clay named "&8&l[&cREMOVE &8&l- &bSPAWNPOINT&8&l]"
		set slot 8 of {_p} to beacon named "&8&l[&bARENA &8&l- &bSETTINGS&8&l]" 
	if {_do} is "exit":
		delete metadata value "SG-SETUP" of {_p}
		loop all items in {_p}'s inventory:
			name of loop-item is "&8&l[&bARENA &8&l- &bSETTINGS&8&l]" or "&8&l[&aADD &8&l- &bSPAWNPOINT&8&l]" or "&8&l[&cREMOVE &8&l- &bSPAWNPOINT&8&l]"
			clear loop-item

function sg_clear_player(p: player):
	set flight mode of {_p} to false
	heal {_p}
	loop ...{_p}.getActivePotionEffects():
		{_p}.removePotionEffect(loop-value.getType())	
	extinguish {_p}
	set {_p}'s food to 20
	clear {_p}'s level
	clear {_p}'s inventory
	close {_p}'s inventory
	set {_p}'s gamemode to survival
	set velocity of {_p} to new vector 0, 0, 0
	delete metadata value "SG-LAST-HIT" of {_p}
	delete metadata value "SG-DEATH" of {_p}

function sg_setspec(p: player, arena: text):
	sg_clear_player({_p})
	set {_p}'s gamemode to adventure
	add {_p} to {-sg::cache::arena::%{_arena}%::players::spec::*}
	set {-sg::cache::player::%{_p}%::arena} to {_arena}
	set {-sg::cache::player::%{_p}%::state} to "IN-GAME-SPEC"
	teleport {_p} to yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%"
	apply potion of invisibility without any particles to {_p} for 7 days
	leaf set colision of {_p} to false
	set flight mode of {_p} to true
	sg_separe_player({_p})
	loop "Teleporter", "Spectator-Settings", "Bounty", "Sponsor" and "Leave":
		set {_p}'s slot yaml value "Items.%loop-value-1%.Slot" from "sg.language" to {-sg::cache::Items.%loop-value-1%.Item::language}
	sg_spectator_effects({_p})

function sg_findarena(p: player, mode: text):
	set {_most} to 0
	loop {-sg::cache::arenas::*}:
		if {-sg::arena.%loop-value-1%::status} is "WAITING" or "STARTING":
			size of {-sg::cache::arena::%loop-value-1%::players::alive::*} < yaml value "MAX-PLAYERS" from "sg.arena.%loop-value-1%"
			add loop-value-1 to {_found::*}
	loop {_found::*}:
		if size of {-sg::cache::arena::%loop-value-1%::players::alive::*} > {_most}:
			set {_most} to size of {-sg::cache::arena::%loop-value-1%::players::alive::*}
			set {_arena} to loop-value-1
	if {-sg::cache::player::%{_p}%::state} is "IN-LOBBY":
		if {_arena} is set:
			sg_join_game({_p}, {_arena})
		if {_arena} is not set:
			set {_arena} to random element out of {_found::*}
			sg_join_game({_p}, {_arena})

function sg_fireworks(arena: text):
	loop 10 times:
		if {-sg::arena.%{_arena}%::status} is "RESTARTING":
			loop yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%" times:
				set {_loc} to yaml value "SPAWNPOINTS.%loop-number-2%" from "sg.arena.%{_arena}%"
				set {_colors::*} to red, green, blue, light green, yellow, orange, white and black
				loop 4 times:
					set {_r} to random element of {_colors::*}
					remove {_r} from {_colors::*}
				launch trailing ball large or burst or star coloured {_colors::*} fading to {_colors::*} at {_loc} with duration 2
			wait 3 seconds
		else:
			stop

function sg_chest_fill(chest: location, arena: text):
	clear inventory of block at {_chest}
	set {_north} to location of block at block 1 north {_chest}
	set {_east} to location of block at block 1 east {_chest}	
	set {_west} to location of block at block 1 west {_chest}	
	set {_south} to location of block at block 1 south {_chest}	
	set {_count} to 1 
	if block at block 1 north {_chest} is chest or trapped chest:
		set {-sg::cache::arena::%{_arena}%::CHEST::%{_north}%} to true
		set {_count} to 2
	if block at block 1 east {_chest} is chest or trapped chest:
		set {-sg::cache::arena::%{_arena}%::CHEST::%{_east}%} to true	
		set {_count} to 2
	if block at block 1 west {_chest} is chest or trapped chest:
		set {-sg::cache::arena::%{_arena}%::CHEST::%{_west}%} to true	
		set {_count} to 2
	if block at block 1 south {_chest} is chest or trapped chest:
		set {-sg::cache::arena::%{_arena}%::CHEST::%{_south}%} to true	
		set {_count} to 2
	loop yaml nodes with keys "Chests" from "sg.config":	
		loop yaml list "Chests.%loop-value-1%" from "sg.arena.%{_arena}%":
			loop-value-2 is {_chest}
			set {_type} to loop-value-1
	if {_type} is not set:
		set {_type} to "Default"		
	set {_items} to a random number between yaml value "Chests.%{_type}%.Min-Items" from "sg.config"*{_count} and yaml value "Chests.%{_type}%.Max-Items" from "sg.config"*{_count}	
	if {_count} is 2:
		set {_slots::*} to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 and 53
	else:
		set {_slots::*} to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 and 26
	set {_loot::*} to {-sg::cache::chests::%{_type}%::*}
	loop {_items} times:
		set {_random} to random element out of {_loot::*}
		set {_slot} to a random element out of {_slots::*}
		add {_random} to slot {_slot} of block at {_chest}
		if "%{_random}%" contains "helmet":
			remove leather helmet, iron helmet, chainmail helmet and gold helmet and diamond helmet from {_loot::*}		
		if "%{_random}%" contains "chestplate":
			remove leather chestplate, iron chestplate, chainmail chestplate and gold chestplate and diamond chestplate from {_loot::*}
		if "%{_random}%" contains "leggings":
			remove leather leggings, iron leggings, chainmail leggings and gold leggings and diamond leggings from {_loot::*}		
		if "%{_random}%" contains "boots":
			remove leather boots, iron boots, chainmail boots and gold boots and diamond boots from {_loot::*}
		remove {_slot} from {_slots::*}
		remove {_random} from {_loot::*}			

function sg_freeze(p: player, arena: text, loc: location):
	while {-sg::arena.%{-sg::cache::player::%{_p}%::arena}%::status} is "WAITING" or "STARTING" or "PRE-DEATHMATCH":
		if distance between {_p} and {_loc} > 0.2:
			if x-coords of {_p} is not x-coords of {_loc}:
				set yaw of {_loc} to yaw of {_p}
				set pitch of {_loc} to pitch of {_p}
				teleport {_p} to {_loc}				
			if z-coords of {_p} is not z-coords of {_loc}:
				set yaw of {_loc} to yaw of {_p}
				set pitch of {_loc} to pitch of {_p}
				teleport {_p} to {_loc}		
		wait a tick

function sg_join_game(p: player, arena: text):
	if {-sg::arena.%{_arena}%::status} is "IN-GAME" or "DEATHMATCH":
		sg_setspec({_p}, {_arena})
		sg_create_board({_p}, {-sg::arena.%{_arena}%::status})
		stop
	if {-sg::arena.%{_arena}%::status} is "RESTARTING":
		send yaml value "Messages.ArenaRestarting" from "sg.language" to {_p}
		stop
	if {-sg::arena.%{_arena}%::status} is "WAITING" or "STARTING":
		if size of {-sg::cache::arena::%{_arena}%::players::alive::*} is yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%":
			send yaml value "Messages.ArenaFull" from "sg.language" to {_p}
			stop
		sg_clear_player({_p})
		add {_p} to {-sg::cache::arena::%{_arena}%::players::alive::*}
		set {-sg::cache::player::%{_p}%::state} to "IN-GAME"
		set {-sg::cache::player::%{_p}%::arena} to {_arena}
		set {-sg::cache::arena::%{_arena}%::gamekills::%{_p}%} to 0
		set {_loc} to yaml value "SPAWNPOINTS.%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" from "sg.arena.%{_arena}%"
		teleport {_p} to {_loc}
		set {_p}'s gamemode to adventure
		sg_arena_items({_p}, {_arena})
		sg_create_board({_p}, {-sg::arena.%{_arena}%::status})
		sg_update_sign({_arena})
		sg_separe_player({_p})
		sg_freeze({_p}, {_arena}, {_loc})
		set {_max} to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"
		set {_join-msg} to sg_player_replacer({_p}, yaml value "Messages.Join" from "sg.language") 
		send replacer "{playing}" and "{max}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" and "%{_max}%" in {_join-msg} to {-sg::cache::arena::%{_arena}%::players::alive::*}
		sg_play_arena_sound({_arena}, "JOIN-ARENA")
		size of {-sg::cache::arena::%{_arena}%::players::alive::*} is yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%":
			if {-sg::cache::arena::%{_arena}%::seconds} > yaml value "Timers.Waiting-Full" from "sg.config":
				set {-sg::cache::arena::%{_arena}%::seconds} to yaml value "Timers.Waiting-Full" from "sg.config"
		size of {-sg::cache::arena::%{_arena}%::players::alive::*} is yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%"
		if {-sg::arena.%{_arena}%::status} is "WAITING":
			sg_set_arena_status({_arena}, "STARTING")		
			send replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in yaml value "Messages.StartingGame" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*}
			sg_play_arena_sound({_arena}, "STARTING-ARENA")
			loop {-sg::cache::arena::%{_arena}%::seconds} times:
				{-sg::arena.%{_arena}%::status} is "STARTING"
				size of {-sg::cache::arena::%{_arena}%::players::alive::*} >= 1:
					remove 1 from {-sg::cache::arena::%{_arena}%::seconds}
					wait a second
					if {-sg::cache::arena::%{_arena}%::seconds} is 30 or 15 or 10 or 5 or 4 or 3 or 2 or 1:
						send replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in yaml value "Messages.StartingGame" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*}
						set {_title} to replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in yaml value "Titles.StartingGame.Title" from "sg.language"					
						sg_play_arena_sound({_arena}, "STARTING-ARENA")
						leaf send title {_title} with subtitle yaml value "Titles.StartingGame.Subtitle" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*} with 5 fadein and 5 fadeout for 20
					if {-sg::cache::arena::%{_arena}%::seconds} <= 0:
						if size of {-sg::cache::arena::%{_arena}%::players::alive::*} >= yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%":
							sg_set_arena_status({_arena}, "IN-GAME")
							stop
						else:
							sg_set_arena_status({_arena}, "WAITING")
							send yaml value "Messages.NotEnoughPlayers" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*}
							sg_play_arena_sound({_arena}, "NOT-ENOUGHT-PLAYERS")
				else:
					sg_set_arena_status({_arena}, "WAITING")

function sg_update_game_time(arena: text, minutes: number, seconds: number = 59):
	set {-sg::cache::arena::%{_arena}%::timer::seconds} to {_seconds}
	set {-sg::cache::arena::%{_arena}%::timer::minutes} to {_minutes}-1

function sg_deathmatch(arena: text):
	sg_set_arena_status({_arena}, "PRE-DEATHMATCH")
	loop {-sg::cache::arena::%{_arena}%::players::spec::*}:
		teleport loop-value-1 to yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%"
	if size of {-sg::cache::arena::%{_arena}%::players::alive::*} <= 3:
		set {_int} to rounded size of yaml nodes with keys "SPAWNPOINTS" from "sg.arena.%{_arena}%"/2
		loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
			set {_loc} to yaml value "DEATHMATCH.%{_int}%" from "sg.arena.%{_arena}%"
			sg_freeze(loop-value-1, {_arena}, {_loc})
			set {_int} to {_int}/2
		stop
	set {_int} to rounded size of yaml nodes with keys "SPAWNPOINTS" from "sg.arena.%{_arena}%" 
	loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
		set {_loc} to yaml value "SPAWNPOINTS.%{_int}%" from "sg.arena.%{_arena}%"
		sg_freeze(loop-value-1, {_arena}, {_loc})
		remove 1 from {_int}		

function sg_game_time(arena: text, minutes: number, seconds: number = 59):
	set {-sg::cache::arena::%{_arena}%::timer::seconds} to {_seconds}
	set {-sg::cache::arena::%{_arena}%::timer::minutes} to {_minutes}-1
	while {-sg::arena.%{_arena}%::status} is "IN-GAME" or "DEATHMATCH" or "PRE-DEATHMATCH":	
		if {-sg::arena.%{_arena}%::status} is "DEATHMATCH":
			loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
				if distance between loop-value-1 and yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%" > yaml value "Settings.DeathmatchRadius" from "sg.config":
					create lightning effect at loop-value-1
					damage loop-value-1 by 1			
		if {-sg::cache::arena::%{_arena}%::timer::minutes} is 0:
			if {-sg::cache::arena::%{_arena}%::timer::seconds} is 59 or 30 or 15 or 10 or 5 or 4 or 3 or 2 or 1:	
				if {-sg::arena.%{_arena}%::status} is "IN-GAME" or "PRE-DEATHMATCH":
					send replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::timer::seconds}%" in yaml value "Messages.DeathmatchStarting" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::spec::*} 
					sg_play_arena_sound({_arena}, "STARTING-ARENA")		
			if {-sg::cache::arena::%{_arena}%::timer::seconds} is 1:			
				if {-sg::arena.%{_arena}%::status} is "DEATHMATCH":
					loop 100 times:
						{-sg::arena.%{_arena}%::status} is "DEATHMATCH":
							loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
								create lightning effect at loop-value-2
								damage loop-value-2 by 1
							wait 3 seconds
						else:
							stop
				if {-sg::arena.%{_arena}%::status} is "PRE-DEATHMATCH":	
					sg_set_arena_status({_arena}, "DEATHMATCH")
					send yaml value "Messages.DeathmatchStart" from "sg.language" to sg_arenaPlayers({_arena})
					sg_play_arena_sound({_arena}, "STARTING-ARENA")	
					stop			
				if {-sg::arena.%{_arena}%::status} is "IN-GAME":				
					sg_deathmatch({_arena})
					stop
		if {-sg::cache::arena::%{_arena}%::timer::seconds} <= 9:
			set {-sg::cache::arena::%{_arena}%::timer::format} to "%{-sg::cache::arena::%{_arena}%::timer::minutes}%:0%{-sg::cache::arena::%{_arena}%::timer::seconds}%"
		else:
			set {-sg::cache::arena::%{_arena}%::timer::format} to "%{-sg::cache::arena::%{_arena}%::timer::minutes}%:%{-sg::cache::arena::%{_arena}%::timer::seconds}%"	
		remove 1 from {-sg::cache::arena::%{_arena}%::timer::seconds}		
		if {-sg::cache::arena::%{_arena}%::timer::seconds} is 0:
			set {-sg::cache::arena::%{_arena}%::timer::seconds} to 59				
			remove 1 from {-sg::cache::arena::%{_arena}%::timer::minutes}								
		wait a second					

function sg_game_event(arena: text, event: text):
	if {_event} is "start-game":
		sg_set_arena_status({_arena}, "IN-GAME")		
		sg_game_time({_arena}, yaml value "Timers.Game" from "sg.config")			
		send yaml value "Messages.StartGame" from "sg.language" to sg_arenaPlayers({_arena})
		sg_play_arena_sound({_arena}, "STARTING-ARENA")
		loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
			sg_clear_player(loop-value-1)					
		leaf send title yaml value "Titles.Start.Title" from "sg.language" with subtitle yaml value "Titles.Start.Subtitle" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*} with yaml value "Titles.Start.FadeIn" from "sg.language" fadein and yaml value "Titles.Start.FadeOut" from "sg.language" fadeout for yaml value "Titles.Start.Duration" from "sg.language"


function sg_winner(arena: text):
	sg_set_arena_status({_arena}, "RESTARTING")
	loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
		set {_p} to loop-value-1
		sg_stats("add", loop-value-1, "wins", 1)
		sg_stats("add", loop-value-1, "coins", yaml value "Rewards.Coins.Win" from "sg.config")
		loop yaml list "Commands.Win" from "sg.config":
			make console execute command replacer "{player}" with "%loop-value-1%" in "%loop-value-2%"
	sg_fireworks({_arena})		
	loop yaml list "Messages.Summary" from "sg.language":
		set {_summary} to loop-value-1
		replace all "{player}" with "%{_p}%" in {_summary}
		replace all "{kills}" with "%{-sg::cache::arena::%{_arena}%::gamekills::%{_p}%}%" in {_summary}
		send message centered colored {_summary} to sg_arenaPlayers({_arena})
	set {_int} to yaml value "Timers.Win-Lenght" from "sg.config"
	loop {_int} times:
		set {-sg::cache::arena::%{_arena}%::timer::format} to "00:0%{_int}-loop-number%"
		wait a second	
	sg_resetarena({_arena})

function sg_set_arena_status(arena: text, status: text):
	set {-sg::arena.%{_arena}%::status} to {_status}
	if {_status} is "WAITING":
		set {-sg::cache::arena::%{_arena}%::seconds} to yaml value "Timers.Waiting" from "sg.config"
	if {_status} is "IN-GAME":		
		sg_game_time({_arena}, yaml value "Timers.Game" from "sg.config")			
		send yaml value "Messages.StartGame" from "sg.language" to sg_arenaPlayers({_arena})
		sg_play_arena_sound({_arena}, "STARTING-ARENA")
		loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
			sg_clear_player(loop-value-1)					
		leaf send title yaml value "Titles.Start.Title" from "sg.language" with subtitle yaml value "Titles.Start.Subtitle" from "sg.language" to {-sg::cache::arena::%{_arena}%::players::alive::*} with yaml value "Titles.Start.FadeIn" from "sg.language" fadein and yaml value "Titles.Start.FadeOut" from "sg.language" fadeout for yaml value "Titles.Start.Duration" from "sg.language"		
	if {_status} is "DEATHMATCH":		
		sg_update_game_time({_arena}, yaml value "Timers.Deathmatch" from "sg.config")		
	if {_status} is "PRE-DEATHMATCH":
		sg_update_game_time({_arena}, 1, yaml value "Timers.Pre-Deathmatch" from "sg.config")
	sg_update_sign({_arena})	
	loop {-sg::cache::arena::%{_arena}%::players::alive::*} and {-sg::cache::arena::%{_arena}%::players::alive::*}:				
		sg_create_board(loop-value-1, {-sg::arena.%{_arena}%::status})		

function firstLetterUpperCase(text: string) :: string:
	set {_1} to subtext of {_text} from 2 to {_text}'s length
	set {_2} to first character of {_text}
	return "%{_2} in upper case%%{_1}%"

function sg_update_place(place: text, p: text, value: text, type: text, loc: location):
	block at {_loc} is wall sign:		
		loop 4 times:
			set {_sign} to yaml value "Signs.Leaderboards.Line-%loop-number%" from "sg.language"
			replace all "{player}" with "%{_p}%" in {_sign}		
			replace all "{value}" with "%{_value}%" in {_sign}		
			replace all "{place}" with "%{_place}%" in {_sign}	
			replace all "TOTAL_" with "" in {_type}			
			replace all "{TOP}" with firstLetterUpperCase({_type}) in {_sign}
			set line loop-number of block at {_loc} to {_sign}	
		yaml value "Settings.Leaderboards.Type" from "sg.config" is "SKULLS":			
			loop blocks in radius 1.5 of {_loc}:
				"%loop-block%" contains "HEAD" or "SKULL"
				if distance between loop-block and {_loc} <= 1.12 or 1.42:
					update skull of {_p} parsed as offline player at loop-block
		yaml value "Settings.Leaderboards.Type" from "sg.config" is "STANDS":
			loop armor stands in radius 1.5 of {_loc}:		
				distance between loop-value-1 and {_loc} <= 1.12 or 1.41
				add "{NoGravity:1b}" to nbt of loop-value-1
				loop-value-1.setArms(true)
				loop-value-1.setBasePlate(false)
				add "{Invulnerable:1b}" to nbt of loop-value-1
				if yaml value "Settings.Leaderboards.SmallArmorStand" from "sg.config" is true:
					loop-value-1.setSmall(true)	
				set loop-value-1's helmet to skull of "%{_p}%" parsed as offline player
	else:
		delete yaml value "Leaderboards.%{_type}%.%{_place}%" from "sg.data"
		save yaml "sg.data"

function sg_update_leaderboards():	
	if {-sg::cache::Leaderboards::working} is set:
		stop
	set {-sg::cache::Leaderboards::working} to true
	loop yaml nodes with keys "Leaderboards" from "sg.data":
		loop yaml nodes with keys "Leaderboards.%loop-value-1%" from "sg.data":				
			if loop-value-1 contains "kills" or "deaths" or  "broken-beds" or "wins" or "final-kills":
				set {_type} to "TOTAL_%loop-value-1%"	
			else:
				set {_type} to loop-value-1			
			set {_place} to loop-value-2			
			execute unsafe "select distinct * from %yaml value ""MySQL.Tablename"" from ""sg.config""% ORDER BY %{_type}% DESC LIMIT %{_place}%" in {SG-DB} and store the result in {_output::*}
			if {_output::username::%{_place}%} is not set:
				sg_update_place("%{_place}%", yaml value "Settings.Leaderboards.EmptyPlaceReplace" from "sg.config", "0", {_type}, yaml value "Leaderboards.%loop-value-1%.%loop-value-2%" from "sg.data")
			else:
				sg_update_place("%{_place}%", "%{_output::username::%{_place}%}%", "%{_output::%{_type}%::%{_place}%}%", {_type}, yaml value "Leaderboards.%loop-value-1%.%loop-value-2%" from "sg.data")
		wait a tick		
	wait a second	
	delete {-sg::cache::Leaderboards::working}
	send "%yaml value ""Messages.Prefix"" from ""sg.language""%&aUpdated Leaderboards." to console

function sg_update_sign(arena: text):
	wait a second
	loop all players:
		if {-sg::cache::player::%loop-value-1%::state} is "IN-LOBBY":
			if display name of top inventory of loop-value-1 is yaml value "Arenas-Browser.Menu" from "sg.menus":
				sg_list(loop-value-1, metadata "SG-LIST-PAGE" of loop-value-1)			
	if yaml value "LOCATION.SIGN" from "sg.arena.%{_arena}%" is set:
		set {_max} to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"
		loop 4 times:
			set {_sign} to yaml value "Signs.Arenas.Line.%loop-number%" from "sg.language"
			replace all "{max}" with "%{_max}%" in {_sign}
			replace all "{arena}" with "%{_arena}%" in {_sign}
			replace all "{status}" with yaml value "Game-Status.%{-sg::arena.%{_arena}%::status}%" from "sg.language" in {_sign}
			replace all "{playing}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" in {_sign}
			set line loop-number of block at yaml value "LOCATION.SIGN" from "sg.arena.%{_arena}%" to {_sign}

function sg_shop(p: player, shop: text = "Main", page: number = 0):
	{_shop} is "Main":
		open chest inventory with 5 rows named yaml value "Shop.Menu" from "sg.menus" to {_p}
		wait a tick
		loop "ArrowTrails" and "SomeCosmetic":
			set {_lore.%loop-value-1%::*} to yaml list "Shop.%loop-value-1%.Lore" from "sg.menus"
			set {_size.%loop-value-1%} to size of {-sg::player::stats::%{_p}%::Data.%loop-value-1%.Bought::*} -1
			set {_total.%loop-value-1%} to size of yaml nodes with keys "%loop-value-1%.List" from "sg.shop"
			replace all "{bought-%loop-value-1%}" with "%{_size.%loop-value-1%}%" in {_lore.%loop-value-1%::*}
			replace all "{total-%loop-value-1%}" with "%{_total.%loop-value-1%}%" in {_lore.%loop-value-1%::*}
		make gui slot yaml value "Shop.ArrowTrails.Slot" from "sg.menus" of {_p} with {-sg::cache::Shop.ArrowTrails.Item::menus} named {-sg::cache::Shop.ArrowTrails.Item::menus}'s name with leaf lore {_lore.ArrowTrails::*} to run function sg_shop({_p}, "ArrowTrails")		
		make gui slot yaml value "Shop.SomeCosmetic.Slot" from "sg.menus" of {_p} with {-sg::cache::Shop.SomeCosmetic.Item::menus} named {-sg::cache::Shop.SomeCosmetic.Item::menus}'s name with leaf lore {_lore.SomeCosmetic::*} to run function sg_shop({_p}, "SomeCosmetic")						
	{_shop} is "ArrowTrails":	
		if {_p} has permission "leafbw.player.shop.arrowtrails":
			open chest inventory with 6 rows named yaml value "ArrowTrails.Menu" from "sg.shop" to {_p}
			wait a tick
			make a gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 52 and 53 of {_p} with {-sg::cache::Trails.Background::menus} to do nothing		
			make gui slot 3 of {_p} with {_p}'s skull named "&7%{_p}%" to do nothing	
			if {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected} is not "0":	
				loop yaml nodes with keys "ArrowTrails.List" from "sg.shop":
					loop-value-1 is {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected}
					set {_display} to yaml value "ArrowTrails.List.%loop-value-1%.Display.Item" from "sg.shop"
				make gui slot 5 of {_p} with {_display} parsed as material named yaml value "ArrowTrails.Current" from "sg.shop" to do nothing		
			else:
				make gui slot 5 of {_p} with barrier named yaml value "ArrowTrails.Current" from "sg.shop" to do nothing	
			make gui slot 10 of {_p} with {-sg::cache::General.None.Item::menus} to run:
				set {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected} to "0"
				send replacer "{name}" with yaml value "Messages.None" from "sg.language" in yaml value "Messages.ArrowTrail.Select" from "sg.language" to {_p}			
				sg_shop({_p}, "ArrowTrails")	
			set {_count} to 0	
			set {_slot} to 11
			loop yaml nodes with keys "ArrowTrails.List" from "sg.shop":
				set {_check} to false	
				set {_trail} to loop-value-1
				set {_name} to yaml value "ArrowTrails.List.%loop-value-1%.Display.Name" from "sg.shop"
				set {_display} to yaml value "ArrowTrails.List.%loop-value-1%.Display.Item" from "sg.shop" parsed as material				
				set {_price} to yaml value "ArrowTrails.List.%loop-value-1%.Price" from "sg.shop"
				add 1 to {_count}
				if {_count} >= 28*{_page}:		
					loop {-sg::player::stats::%{_p}%::Data.ArrowTrails.Bought::*}:
						if {_trail} is "%loop-value-2%":	
							set {_check} to true
							set {_lore::*} to yaml list "ArrowTrails.Purchased" from "sg.shop"
							make gui slot {_slot} of {_p} with {_display} named {_name} with leaf lore yaml list "ArrowTrails.Purchased" from "sg.shop" to run:
								set {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected} to {_trail}
								send replacer "{name}" with "%{_name}%" in yaml value "Messages.ArrowTrail.Select" from "sg.language" to {_p}
								mysql execute "update" with {_p}
								sg_shop({_p}, "ArrowTrails")
					{_check} is false:
						set {_lore::*} to yaml list "ArrowTrails.Not_Purchased" from "sg.shop"		
						replace all "{price}" with "%{_price}%" in {_lore::*}
						make gui slot {_slot} of {_p} with {_display} with name {_name} with leaf lore {_lore::*} to run:
							if {-sg::player::stats::%{_p}%::coins} >= {_price}:
								if yaml value "ArrowTrails.List.%{_trail}%.Permission" from "sg.shop" is set:
									if {_p} does not have permission yaml value "ArrowTrails.List.%{_trail}%.Permission" from "sg.shop":
										send yaml value "Messages.No Permission" from "sg.language" to {_p}
										stop				
								set {_lore::*} to yaml list "ArrowTrails.Not_Purchased_Preview" from "sg.shop"	
								replace all "{price}" with "%{_price}%" in {_lore::*}							
								open chest inventory with 1 rows named yaml value "Shop.Confirm.Menu" from "sg.menus" to {_p}
								wait a tick
								make gui slot 4 of {_p} with {_display} named {_name} with leaf lore {_lore::*} to do nothing
								make gui slot 2 of {_p} with green glass named yaml value "Shop.Confirm.Accept" from "sg.menus" to run:
									add {_trail} to {-sg::player::stats::%{_p}%::Data.ArrowTrails.Bought::*}
									set {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected} to {_trail}
									sg_stats("take", {_p}, "coins", {_price})
									send replacer "{name}" with "%{_name}%" in yaml value "Messages.ArrowTrail.Purchase" from "sg.language" to {_p}
									mysql execute "update" with {_p}
									sg_shop({_p}, "ArrowTrails")
								make gui slot 6 of {_p} with red glass named yaml value "Shop.Confirm.Deny" from "sg.menus" to run:	
									sg_shop({_p}, "ArrowTrails")
							else:
								send yaml value "Messages.Not Enought Coins" from "sg.language" to {_p}									
					{_count} = 7, 14, 21 or 29:
						wait a tick										
					add 1 to {_slot}
					if {_slot} is 17 or 26 or 35:
						add 2 to {_slot}
					if {_slot} is 44:
						exit loop		
			if size of yaml nodes with keys "ArrowTrails.List" from "sg.shop" >= 28*{_page} + 28:			
				make a gui slot 53 of {_p} with {-sg::cache::General.Next-Page::menus} to run function sg_shop({_p}, "ArrowTrails", ({_page} + 1))					
			if {_page} > 0:
				make a gui slot 45 of {_p} with {-sg::cache::General.Previous-Page::menus} to run function sg_shop({_p}, "ArrowTrails", ({_page} - 1))
				make a gui slot 50 of {_p} with {-sg::cache::General.Main-Page::menus} to run function sg_shop({_p}, "ArrowTrails", 0)
			make a gui slot 49 of {_p} with {-sg::cache::General.Back::menus} to run function sg_shop({_p}, "Main")	
		else:
			send yaml value "Messages.No Permission" from "sg.language" to {_p}		

function sg_spectator_effects(p: player):
	if {-sg::player::stats::%{_p}%::Data.Spectator-Settings.Speed} is 0:
		remove speed from {_p}
	if {-sg::player::stats::%{_p}%::Data.Spectator-Settings.Speed} is 1 or 2 or 3 or 4:
		apply potion of speed {-sg::player::stats::%{_p}%::Data.Spectator-Settings.Speed} without any particles to {_p} for 7 days
	if {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} is "true":
		apply potion of night vision without any particles to {_p} for 7 days
	if {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} is "false":
		remove night vision from {_p}
	close {_p}'s inventory

function sg_menu_sponsor(p: player, slot: number = 0):
	open chest inventory with 6 rows named yaml value "Sponsor.Menu" from "sg.menus" to {_p}
	wait a tick
	set {_slot} to 0
	loop {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::players::alive::*}:
		set {_spectating} to loop-value-1
		set {_name} to yaml value "Sponsor.Player-Format.Name" from "sg.menus"
		replace all "{player}" with "%{_spectating}%" in {_name}
		make a gui slot {_slot} of {_p} with {_spectating}'s skull named {_name} with leaf lore yaml list "Sponsor.Player-Format.Lore" from "sg.menus" to run:
			open chest inventory with 6 rows named yaml value "Sponsor.Menu" from "sg.menus" to {_p}
			wait a tick
			loop yaml nodes with keys "Sponsor.Items" from "sg.menus":
				set {_value} to loop-value-2					
				make a gui slot yaml value "Sponsor.Items.%{_value}%.Slot" from "sg.menus" of {_p} with {-sg::cache::Sponsor.Items.%{_value}%.Item::menus} to run:
					if {-sg::player::stats::%{_p}%::coins} >= yaml value "Sponsor.Items.%{_value}%.Cost" from "sg.menus":
						sg_stats("remove", {_p}, "coins", yaml value "Sponsor.Items.%{_value}%.Cost" from "sg.menus")
						set {_1} to yaml value "Messages.SponsorPlayer" from "sg.language"
						set {_2} to yaml value "Messages.GotSponsored" from "sg.language"
						replace all "{player}" with "%{_spectating}%" in {_1}
						replace all "{player}" with "%{_p}%" in {_2}
						send {_1} to {_p}
						send {_2} to {_spectating}					
						give yaml value "Sponsor.Items.%{_value}%.Item" from "sg.menus" parsed as material to {_spectating}
						close {_p}'s inventory
					else:
						send yaml value "Messages.Not-enought-coins" from "sg.language" to {_p}
						close {_p}'s inventory
		add 1 to {_slot}

function sg_menu_spectator(p: player, slot: number = 0):
	open chest inventory with 6 rows named yaml value "Spectator.Menu" from "sg.menus" to {_p}
	wait a tick
	set {_slot} to 0
	loop {-sg::cache::arena::%{_arena}%::players::alive::*}:
		set {_spectating} to loop-value-1
		set {_name} to yaml value "Spectator.Player-Format.Name" from "sg.menus"
		replace all "{player}" with "%{_spectating}%" in {_name}
		make a gui slot {_slot} of {_p} with {_spectating}'s skull named {_name} with leaf lore yaml list "Spectator.Player-Format.Lore" from "sg.menus" to run:
			if {-sg::cache::player::%{_p}%::arena} is {-sg::cache::player::%{_spectating}%::arena}:
				teleport {_p} to {_spectating}
				send replacer "{player}" with "%{_spectating}%" in yaml value "Messages.Teleported-to" from "sg.language" to {_p}
			else:
				close {_p}'s inventory
		add 1 to {_slot}

function sg_menu_spectator_settings(p: player):
	open chest inventory with 4 rows named yaml value "Spectator-Settings.Menu" from "sg.menus" to {_p}
	wait a tick
	loop 0, 1, 2, 3 and 4:
		set {_speed} to loop-value-1
		make a gui slot yaml value "Spectator-Settings.Speed.%loop-value-1%.Slot" from "sg.menus" of {_p} with {-sg::cache::Spectator-Settings.Speed.%{_speed}%.Item::menus} to run:
			set {-sg::player::%{_p}%::Data.Spectator-Settings.Speed} to {_speed}
			sg_spectator_effects({_p}) 
	if {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} is "true":
		make a gui slot yaml value "Spectator-Settings.Night-Vision.OFF.Slot" from "sg.menus" of {_p} with {-sg::cache::Spectator-Settings.Night-Vision.OFF.Item::menus} to run:
			set {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} to "false"
			sg_spectator_effects({_p})
	if {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} is "false":
		make a gui slot yaml value "Spectator-Settings.Night-Vision.ON.Slot" from "sg.menus" of {_p} with {-sg::cache::Spectator-Settings.Night-Vision.ON.Item::menus} to run:
			set {-sg::player::stats::%{_p}%::Data.Spectator.Night-Vision} to "true"
			sg_spectator_effects({_p})	

function sg_menu_bounty(p: player, slot: number = 0):
	open chest inventory with 6 rows named yaml value "Bounty.Menu" from "sg.menus" to {_p}
	wait a tick
	loop {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::players::alive::*}:
		set {_spectating} to loop-value-1
		set {_name} to yaml value "Bounty.Player-Format.Name" from "sg.menus"
		replace all "{player}" with "%{_spectating}%" in {_name}
		make a gui slot {_slot} of {_p} with {_spectating}'s skull named {_name} with leaf lore yaml list "Bounty.Player-Format.Lore" from "sg.menus" to run:
			open chest inventory with 6 rows named yaml value "Bounty.Menu" from "sg.menus" to {_p}
			wait a tick
			set {_slot} to 0				
			loop 54 times:
				set {_cost} to loop-value-2*100					
				make a gui slot {_slot} of {_p} with gold ingot named "&e%{_cost}%" to run:
					if {-sg::player::stats::%{_p}%::coins} >= {_cost}:
						if {-sg::cache::player::%{_spectating}%::bounty} is not set:
							set {-sg::cache::player::%{_spectating}%::bounty} to {_cost}
							sg_stats("remove", {_p}, "coins", {_cost})
							set {_msg} to yaml value "Messages.BountySet" from "sg.language"
							replace all "{points}" with "%{_cost}%" in {_msg}
							replace all "{target}" with "%{_spectating}%" in {_msg}
							replace all "{player}" with "%{_p}%" in {_msg}
							send {_msg} to {-sg::cache::arena::%{-sg::cache::player::%{_spectating}%::arena}%::players::alive::*} and {-sg::cache::arena::%{-sg::cache::player::%{_spectating}%::arena}%::players::spec::*}
							close {_p}'s inventory
						else:
							send yaml value "Messages.BountyAlreadySet" from "sg.language" to {_p}
							close {_p}'s inventory
					else:
						send yaml value "Messages.Not-enought-coins" from "sg.language" to {_p}
						close {_p}'s inventory
				add 1 to {_slot}
		add 1 to {_slot}

function sg_menu_setup(p: player, menu: text):			
	if {_p} has permission "sg.setup":
		set {_arena} to metadata value "SG-SETUP" of {_p}
		open chest inventory with 5 rows named "&8» &3ARENA SETTINGS" to {_p}
		wait a tick
		set {_y} to 0
		loop 45 times:
			make a gui slot {_y} of {_p} with black glass pane named "&7" to do nothing
			add 1 to {_y}

		if yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%" is set:
			set {_check} to "&a&l✔"
		else:
			set {_check} to "&c&l✘"
		make a gui slot 0 of {_p} with nether star named "&3&l» &7&nClick to set arena position 1 &r &8&l[%{_check}%&8&l]" to run:
			set yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%" to location of {_p}
			send "{@setup-prefix}Setted the &aArena Position 1 &7to your current location!" to {_p}
			close {_p}'s inventory

		if yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%{_arena}%" is set:
			set {_check} to "&a&l✔"
		else:
			set {_check} to "&c&l✘"
		make a gui slot 8 of {_p} with 2 of nether star named "&3&l» &7&nClick to set arena position 2 &r &8&l[%{_check}%&8&l]" to run:
			set yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%{_arena}%" to location of {_p}
			send "{@setup-prefix}Setted the &aArena Position 2 &7to your current location!" to {_p}
			close {_p}'s inventory

		if yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%" is set:
			set {_check} to "&a&l✔"
		else:
			set {_check} to "&c&l✘"
		make a gui slot 20 of {_p} with player head named "&3&l» &7&nClick to set minimum players&r &8&l[%{_check}%&8&l]" to run:
			set {_slot} to -1
			open chest inventory with 6 rows named "&8» &7SET MIN" to {_p}
			wait a tick
			loop 55 times:
				set {_int} to loop-value-1
				make a gui slot {_slot} of {_p} with loop-number of player head named "&3&l» &7&nClick to set minimum players to &c&l- &8&l(&b&l%{_int}%&8&l)" to run:
					set yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%" to {_int}
					send "{@setup-prefix}Setted the &aminimum players &7to &a%{_int}%&7!" to {_p}
					sg_menu_setup(player, "ARENA-SETTING")
				add 1 to {_slot}
		if yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%" is set:
			set {_check} to "&a&l✔"
		else:
			set {_check} to "&c&l✘"
		make a gui slot 24 of {_p} with beacon named "&3&l» &7&nClick to set arena center&r &8&l[%{_check}%&8&l]" to run:
			set yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%" to location of {_p}
			send "{@setup-prefix}Setted the &aArena Center &7to your current location!" to {_p}
			close {_p}'s inventory

		make a gui slot 22 of {_p} with chest named "&3&l» &7&nChest Tool" to run:
			yaml value "STATE" from "sg.arena.%{_arena}%" is set
			open chest inventory with 6 rows named "&aChest types" to {_p}
			wait a tick
			set {_slot} to 0
			loop yaml nodes with keys "Chests" from "sg.config":	
				set {_chest} to loop-value-1
				make a gui slot {_slot} of {_p} with chest named "&7&b%{_chest}%" to run:
					close {_p}'s inventory
					set metadata value "SG-CHEST-ARENA" of {_p} to {_arena}
					set metadata value "SG-CHEST-TYPE" of {_p} to {_chest}
					set slot 4 of {_p} to blaze rod named "&e&nChest Tool"	
				add 1 to {_slot}
		set {_slot} to 3		
		loop 3 times:
			set {_int} to loop-number-1
			if yaml value "DEATHMATCH.%{_int}%" from "sg.arena.%{_arena}%" is set:
				set {_check} to "&a&l✔"
			else:
				set {_check} to "&c&l✘"
			make a gui slot {_slot} of {_p} with {_int} of gray dye named "&3&l» &7&nClick to set spawnpoint %{_int}% for deathmatch&r &8&l[%{_check}%&8&l]" to run:
				set yaml value "DEATHMATCH.%{_int}%" from "sg.arena.%{_arena}%" to location of {_p}
				sg_menu_setup(player, "ARENA-SETTING")
			add 1 to {_slot}
		make a gui slot 44 of {_p} with ender chest named "&3&l» &7&nClick to save arena." to run:
			close {_p}'s inventory
			if yaml value "STATE" from "sg.arena.%{_arena}%" is "SETUP":
				if yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%" is set:
					if yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%" is set:
						loop 3 times:
							if yaml value "DEATHMATCH.%loop-number-1%" from "sg.arena.%{_arena}%" is not set:
								send "{@setup-prefix}Deathmatch spawnpoint &e%loop-number-1% &7is not set!" to {_p} 
								stop
						if yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%" is set:
							if yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%{_arena}%" is set:
								set yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%" to size of yaml nodes with keys "SPAWNPOINTS" from "sg.arena.%{_arena}%"
								send "{@setup-prefix}Saving the arena..." to {_p}
								send "{@setup-prefix}The arena &a%{_arena}%&7 has been saved!" to {_p}
								set yaml value "STATE" from "sg.arena.%{_arena}%" to "READY"
								wait a second
								save schematic "plugins/LeafSG/arenas/saves/%{_arena}%.schem" from yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%" and yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%{_arena}%"
								save yaml "sg.arena.%{_arena}%"
								add {_arena} to {-sg::cache::arenas::*}
								sg_setup_arena({_p}, "exit", "0")
							else:
								send "&cYou must set arena position 2!" to {_p}										
						else:
							send "&cYou must set arena position 1!" to {_p}								
					else:
						send "&cYou must set arena center!" to {_p}
				else:
					send "&cYou need to set the minimum players!" to {_p}
		make a gui slot 36 of {_p} with lava bucket named "&3&l» &7&nClick to delete arena &8&l(&c&l!&8&l)" to run:
			make {_p} execute command "sg deleteArena %{_arena}%"
			close {_p}'s inventory

function sg_separe_player(p: player):
	yaml value "Settings.PerArenaTablist" from "sg.config" is true
	wait a tick
	if {-sg::cache::player::%{_p}%::state} is not set:
		loop all players:
			if {-sg::cache::player::%loop-player%::state} is set:
				hide loop-player from {_p}
				hide {_p} from loop-player
			else:
				reveal loop-player from {_p}
				reveal {_p} from loop-player
	if {-sg::cache::player::%{_p}%::state} is "IN-LOBBY":
		loop all players:
			if {-sg::cache::player::%loop-player%::state} is "IN-LOBBY":
				reveal loop-player from {_p}
				reveal {_p} from loop-player
			else:
				hide loop-player from {_p}
				hide {_p} from loop-player
	if {-sg::cache::player::%{_p}%::state} is "IN-GAME":
		loop all players:
			if {-sg::cache::player::%loop-player%::state} is "IN-GAME":
				if {-sg::cache::player::%{_p}%::arena} is {-sg::cache::player::%loop-player%::arena}:
					reveal loop-player from {_p}
					reveal {_p} from loop-player
				else:
					hide loop-player from {_p}
					hide {_p} from loop-player
			else:
				hide loop-player from {_p}
				hide {_p} from loop-player
	if {-sg::cache::player::%{_p}%::state} is "IN-GAME-SPEC":
		loop all players:
			if {-sg::cache::player::%loop-player%::arena} is {-sg::cache::player::%{_p}%::arena}:
				if {-sg::cache::player::%loop-player%::state} is "IN-GAME":
					hide loop-player from {_p}
					reveal {_p} for loop-player
			else:
				hide loop-player from {_p}
				hide {_p} from loop-player

function sg_resetarena(arena: text):
	send "&aReseting &e%{_arena}%" to console
	sg_set_arena_status({_arena}, "RESTARTING")
	loop sg_arenaPlayers({_arena}):
		sg_join_lobby(loop-value-1)
	delete {-sg::cache::arena::%{_arena}%::CHEST::*}
	delete {sg.arena.%{_arena}%::*}
	delete {-sg::cache::arena::%{_arena}%::*}		
	set {_loc} to yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%"
	clear all entities in radius 1000 of {_loc}
	if new File("plugins/LeafSG/arenas/saves/%{_arena}%.schem").isFile() is true:
		paste schematic "plugins/LeafSG/arenas/saves/%{_arena}%.schem" at yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%"
	sg_set_arena_status({_arena}, "WAITING")
	send "&e%{_arena}% &areseted!" to console

on join:
	if yaml value "Bungeecord.Enabled" from "sg.config" is true:
		sg_join_lobby(player, true)
		set join message to ""
	sg_separe_player(player)

command sg [<text = help>] [<text>] [<player>] [<number>]:
	executable by: players
	aliases: hungergames, survivalgames
	trigger:
		if arg-1 is "help":
			loop "PLAYER", "ADMIN" and "SETUP":
				if player has permission "sg.%loop-value-1%":
					loop yaml list "Messages.Help.%loop-value-1%" from "sg.language":
						send colored "%loop-value-2%" to player
			stop
		if arg-1 is "autojoin" or "list" or "leave" or "join" or "version" or "stats" or "shop":
			if player has permission "sg.player":
				if arg-1 is "autojoin":
					if {-sg::cache::player::%player%::state} is "IN-LOBBY":
						send yaml value "Messages.Searching-arenas" from "sg.language"
						if arg-2 is set:
							sg_findarena(player, arg-2)
						else:
							sg_findarena(player, "Random")
					else:
						send yaml value "Messages.MustBeInLobby" from "sg.language"
				if arg-1 is "join":
					if arg-2 is not set:
						if {-sg::cache::player::%player%::state} is not set:
							sg_join_lobby(player, true)
							stop
						if {-sg::cache::player::%player%::state} is "IN-LOBBY":
							send yaml value "Messages.SpecifyArenaName" from "sg.language"
						else:
							send yaml value "Messages.MustBeInLobby" from "sg.language"
					if arg-2 is set:
						if {-sg::cache::player::%player%::state} is "IN-LOBBY":
							yaml "sg.arena.%arg-2%" is loaded
							if yaml value "STATE" from "sg.arena.%arg-2%" is "READY":
								sg_join_game(player, arg-2)
							else:
								send yaml value "Messages.InvalidArena" from "sg.language"
				if arg-1 is "shop":
					if {-sg::cache::player::%player%::state} is "IN-LOBBY":
						if arg-2 is "Main" or "ArrowTrails":
							sg_shop(player, arg-2)
						else:
							sg_shop(player)
					else:
						send yaml value "Messages.MustBeInLobby" from "sg.language"
				if arg-1 is "list":
					if {-sg::cache::player::%player%::state} is "IN-LOBBY":
						sg_list(player)
					else:
						send yaml value "Messages.MustBeInLobby" from "sg.language"
				if arg-1 is "leave":
					if {-sg::cache::player::%player%::state} is set:
						sg_leave(player)
					else:
						send yaml value "Messages.NotInGame" from "sg.language"
				if arg-1 is "version":
					send "{@plugin-version}"
			else:
				send yaml value "Messages.NoPermission" from "sg.language"
		if arg-1 is "createArena" or "deleteArena" or "editArena" or "setLobby" or "setLobbyLeave" or "editMode" or "chestTool":
			if player has permission "sg.setup":
				if arg-1 is "setLobby":
					if {-sg::cache::player::%player%::state} is not set:
						set yaml value "LOCATIONS.MAIN-LOBBY" from "sg.data" to player's location
						send "{@setup-prefix}Setted the &aLobby &7to your current location!"
						save yaml "sg.data"
					else:
						send "&cYou can't change the Lobby location while playing!"
				if arg-1 is "setLobbyLeave":
					if {-sg::cache::player::%player%::state} is not set:
						set yaml value "LOCATIONS.LOBBY-LEAVE" from "sg.data" to player's location
						send "{@setup-prefix}Setted the &aLobby Leave &7to your current location!"
						save yaml "sg.data"
					else:
						send "&cYou can't change the Leave Point location while playing!"
				if arg-1 is "createArena":
					if arg-2 is set:
						if {-sg::cache::player::%player%::state} is not set:
							load yaml "plugins/LeafSG/arenas/%arg-2%.yml" as "sg.arena.%arg-2%"
							if yaml value "STATE" from "sg.arena.%arg-2%" is not set:
								set yaml value "STATE" from "sg.arena.%arg-2%" to "SETUP"
								send "{@setup-prefix}The arena &a%arg-2% &7has been successfully created!"
								sg_setup_arena(player,"enter", arg-2)
							else:
								send "{@setup-prefix}&cThis arena has already been created!"
						else:
							send yaml value "Messages.AlreadyInGame" from "sg.language"
					else:
						send yaml value "Messages.SpecifyArenaName" from "sg.language"
				if arg-1 is "editMode":
					if {-sg::cache::player::%player%::state} is "IN-LOBBY":
						sg_separe_player(player)
						sg_clear_data(player)
						sg_clear_player(player)
						delete scoreboard of player
					if {-sg::cache::player::%player%::state} is "IN-GAME":
						send yaml value "Messages.AlreadyInGame" from "sg.language"
				if arg-1 is "chestTool":
					if arg-2 is set:
						yaml value "STATE" from "sg.arena.%arg-2%" is set
						open chest inventory with 6 rows named "&aChest types" to player
						wait a tick
						set {_slot} to 0
						set {_arena} to arg-2
						loop yaml nodes with keys "Chests" from "sg.config":	
							set {_chest} to loop-value-1
							make a gui slot {_slot} of player with chest named "&7&b%{_chest}%" to run:
								close player's inventory
								set metadata value "SG-CHEST-ARENA" of player to {_arena}
								set metadata value "SG-CHEST-TYPE" of player to {_chest}
								if player's inventory contains blaze rod named "&e&nChest Tool":
									stop
								give an blaze rod named "&e&nChest Tool" to player	
							add 1 to {_slot}								
				if arg-1 is "editArena":
					if arg-2 is set:
						if {-sg::cache::player::%player%::state} is not set:
							yaml "sg.arena.%arg-2%" is loaded
							if yaml value "STATE" from "sg.arena.%arg-2%" is set:
								remove arg-2 from {-sg::cache::arenas::*}
								teleport player to yaml value "LOCATION.CENTER" from "sg.arena.%arg-2%"
								set yaml value "STATE" from "sg.arena.%arg-2%" to "SETUP"
								save yaml "sg.arena.%arg-2%"
								set metadata value "SG-SETUP" of player to arg-2
								send "{@setup-prefix}You are now editing arena &a%arg-2%. &7!"
								sg_setup_arena(player,"enter", arg-2)
							else:
								send "&cThis arena not exists!"
						else:
							send yaml value "Messages.AlreadyInGame" from "sg.language"
					else:
						send yaml value "Messages.SpecifyArenaName" from "sg.language"
				if arg-1 is "deleteArena":
					if arg-2 is set:
						if {-sg::cache::player::%player%::state} is not set:
							if yaml value "STATE" from "sg.arena.%arg-2%" is "SETUP" or "READY":
								remove arg-2 from {-sg::cache::arenas::*}
								if metadata value "SG-SETUP" of player is arg-2:
									sg_setup_arena(player,"exit", "0")
								delete yaml "sg.arena.%arg-2%"
								send "{@setup-prefix}The arena &c%arg-2%&7 has been successfully deleted!"
							else:
								send yaml value "Messages.InvalidArena" from "sg.language"
						else:
							send yaml value "Messages.AlreadyInGame" from "sg.language"
					else:
						send yaml value "Messages.SpecifyArenaName" from "sg.language"
			else:
				send yaml value "Messages.NoPermission" from "sg.language"
		if arg-1 is "update-Leaderboards" or "coins" or "reload":
			if player have permission "sg.admin":
				if arg-1 is "update-Leaderboards":
					sg_update_leaderboards()
					send "&aLeaderboards Updated!"
				if arg-1 is "reload":
					send "&cReloading Plugin..."
					make console execute command "sk reload %script%"					
				if arg-1 is "coins":
					if arg-3 is set:
						if arg 4 is set:
							if arg-2 is "give":
								if arg-4 >= 1:
									sg_stats("add", arg-3, "coins", arg-4)
									send "&7Gived &a%arg-4% &7coins to &a%arg-3%&7!"
								else:
									send "&cYou can't use this value!"
							if arg-2 is "take":
								if arg-4 >= 1:
									sg_stats("remove", arg-3, "coins", arg-4)
									send "&7Taked &a%arg-4% &7coins from &a%arg-3%&7!"
								else:
									send "&cYou can't use this value!"
							if arg-2 is "set":
								if arg-4 >= 0:
									sg_stats("set", arg-3, "coins", arg-4)
									send "&7Setted &a%arg-3%&a's &7coins to &a%arg-4%&7!"
								else:
									send "&cYou can't use this value!"
						else:
							send "&7/sg coins &cset/give/take &a[player] &a[number]"
					else:
						send "&7/sg coins &cset/give/take &a[player] &a[number]"
			else:
				send yaml value "Messages.NoPermission" from "sg.language"
		if arg-1 is "start":
			if player have permission "sg.admin" or "sg.start":
				if {-sg::cache::player::%player%::state} is "IN-GAME":
					if size of {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::alive::*} >= 1:
						if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "WAITING" or "STARTING":
							send replacer "{player}" with "%player%" in yaml value "Messages.ForcedStart" from "sg.language" to {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::alive::*} and {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::spec::*}
							sg_play_arena_sound({-sg::cache::player::%player%::arena}, "STARTING-ARENA")
							sg_set_arena_status({-sg::cache::player::%player%::arena}, "IN-GAME")
						else:
							send yaml value "Messages.Not-now" from "sg.language"
					else:
						send yaml value "Messages.NotEnoughPlayers" from "sg.language"
				else:
					send yaml value "Messages.NotInGame" from "sg.language"
			else:
				send yaml value "Messages.NoPermission" from "sg.language"

on chat:
	if {-sg::cache::player::%player%::state} is set:
		if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC":
			set {_chat} to yaml value "Chat.Spectator" from "sg.config"
			set {_players::*} to {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::spec::*}
		if {-sg::cache::player::%player%::state} is "IN-GAME":
			if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "STARTING" or "WAITING":
				set {_chat} to yaml value "Chat.WaitingLobby" from "sg.config"
			else:
				set {_chat} to yaml value "Chat.Game" from "sg.config"
			set {_players::*} to {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::alive::*} and {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::players::spec::*}
		if {-sg::cache::player::%player%::state} is "IN-LOBBY":
			set {_chat} to yaml value "Chat.Lobby" from "sg.config"
			loop all players:
				if {-sg::cache::player::%loop-player%::state} is "IN-LOBBY":
					add loop-player to {_players::*}
		loop "coins", "kills", "wins", "deaths", "chests" and "playedgames":
			replace all "{%loop-value-1%}" with "%{-sg::player::stats::%player%::%loop-value-1%}%" in {_chat}
		set {_msg} to sg_player_replacer(player, {_chat})
		replace all "{message}" with message in {_msg}
		set chat format to {_msg}
		set chat recipients to {_players::*}

on sign change:
	if line 1 is "[SG]" or "[SURVIVALGAMES]":
		if player has permission "sg.setup":
			if line 2 is set:
				if line 2 is "autojoin":
					set line 1 to yaml value "Signs.Arenas.Line.1" from "sg.language"
					set line 2 to yaml value "Signs.Arenas.AutoJoin" from "sg.language"
					send "&7Sign Added"
				if line 2 is "join":
					if yaml value "STATE" from "sg.arena.%line 3%" is "READY":
						set yaml value "LOCATION.SIGN" from "sg.arena.%line 3%" to location of event-block
						send "&a&lSign Added"
						save yaml "sg.arena.%line 3%"
						sg_update_sign(line 3)
					else:
						send "&aThis arena dosen't exist"
				if line 2 is "top":
					if line 3 is "coins" or "kills" or "wins" or "deaths" or "chests" or "playedgames":
						line 4 parsed as number is set:
							set yaml value "Leaderboards.%line 3%.%line 4 parsed as number%" from "sg.data" to location of event-block
							send "&a&lSign Added"
							save yaml "sg.data"
							wait a second
							sg_update_leaderboards()
						else:
							send "&aSpecify place."
					else:
						send "&aThis type dosen't exist, types: kills, wins or deaths, coins and chests"
		else:
			set block at event-block to air
			drop 1 sign at event-block
			send yaml value "Messages.NoPermission" from "sg.language"

on break of sign:
	if line 1 is yaml value "Signs.Arenas.Line.1" from "sg.language":
		loop {-sg::cache::arenas::*}:
			if yaml value "LOCATION.SIGN" from "sg.arena.%loop-value-1%" is location of event-block:
				delete yaml value "LOCATION.SIGN" from "sg.arena.%loop-value-1%"
				send "&cSign removed"
				save yaml "sg.arena.%loop-value-1%"
	if line 1 is yaml value "Signs.Top.Line.1" from "sg.config":
		loop yaml nodes with keys "Leaderboards" from "sg.data":
			loop yaml nodes with keys loop-value-1 from "sg.data":
				yaml value "%loop-value-1%.%loop-value-2%" from "sg.data" is location of event-block
				delete yaml value "%loop-value-1%.%loop-value-2%" from "sg.data"
				save yaml "sg.data"
				send "&cSign removed"

on right click on sign:
	if {-sg::cache::player::%player%::state} is "IN-LOBBY":
		line 1 = yaml value "Signs.Arenas.Line.1" from "sg.language"
		if line 2 is yaml value "Signs.Arenas.AutoJoin" from "sg.language":
			sg_findarena(player, "Random")
		if line 3 is set:
			loop {-sg::cache::arenas::*}:
				yaml value "LOCATION.SIGN" from "sg.arena.%loop-value-1%" is location of event-block
				if yaml value "STATE" from "sg.arena.%loop-value-1%" is "READY":
					sg_join_game(player, loop-value-1)
					stop
				else:
					send yaml value "Messages.InvalidArena" from "sg.language"
					stop

function sg_chest_setup(p: player, do: text, loc: location):
	set {_arena} to metadata value "SG-CHEST-ARENA" of {_p}
	set {_chest} to metadata value "SG-CHEST-TYPE" of {_p}
	{_do} is "add":
		loop yaml list "Chests.%{_chest}%" from "sg.arena.%{_arena}%":
			loop-value-1 is {_loc}
			stop
		add {_loc} to yaml list "Chests.%{_chest}%" from "sg.arena.%{_arena}%"
	{_do} is "remove":
		remove {_loc} from yaml list "Chests.%{_chest}%" from "sg.arena.%{_arena}%"
	save yaml "sg.arena.%{_arena}%"

on left click on chest or trapped chest:
	metadata value "SG-CHEST-ARENA" of player is set:
		name of event-item is "&e&nChest Tool"
		cancel event
		sg_chest_setup(player, "add", location of event-block)
		send "{@setup-prefix}Chest added."

on right click on chest or trapped chest:
	metadata value "SG-CHEST-ARENA" of player is set:
		name of event-item is "&e&nChest Tool"
		cancel event
		sg_chest_setup(player, "remove", location of event-block)
		send "{@setup-prefix}Chest removed."

function sg_player_death(p: player):
	set {_arena} to {-sg::cache::player::%{_p}%::arena}
	create lightning effect at {_p}
	sg_stats("add", {_p}, "deaths", 1)
	remove {_p} from {-sg::cache::arena::%{_arena}%::players::alive::*}
	if metadata value "SG-LAST-HIT" of {_p} is set:
		set {_killer-temp} to metadata value "SG-LAST-HIT" of {_p}
		add 1 to {-sg::cache::arena::%{_arena}%::gamekills::%{_killer-temp}%}		
		sg_stats("add", {_killer-temp}, "kills", 1)
		sg_play_player_sound({_killer-temp}, "KILL")	
		if {-sg::cache::player::%{_p}%::bounty} is set:
			sg_stats("add", {_p}, "coins", {-sg::cache::player::%{_p}%::bounty})
			set {_msg} to yaml value "Messages.BountyClaim" from "sg.language"
			replace all "{victim}" with "%{_p}%" in {_msg}
			replace all "{points}" with "%{-sg::cache::player::%{_p}%::bounty}%" in {_msg}	
			send colored {_msg} to sg_arenaPlayers({_arena})	
			delete {-sg::cache::player::%{_p}%::bounty}
		if yaml value "Rewards.Percentage-System.Enabled" from "sg.config" is true:
			set {_vpoints} to {-sg::player::stats::%{_killer-temp}%::coins}
			set {_points} to 5/100*{_vpoints}
			set {_points} to rounded {_points}
			sg_stats("remove", {_p}, "coins", {_points})
			if yaml value "Rewards.Percentage-System.Minimum.Enabled" from "sg.config" is true:
				set {_points} to yaml value "Rewards.Percentage-System.Minimum.Rewards" from "sg.config" 		
			if yaml value "Rewards.Percentage-System.AllowNegativeBalance" from "sg.config" is false:
				if {-sg::player::stats::%{_killer-temp}%::coins} < 0:
					sg_stats("set", {_p}, "coins", 0)
		else:
			set {_points} to yaml value "Rewards.Coins.Kill" from "sg.config"
		sg_stats("add", {_killer-temp}, "coins", {_points})
		loop yaml list "Commands.Kill" from "sg.config":
			make console execute command replacer "{killer}" and "{victim}" with "%{_killer-temp}%" and "%{_p}%" in "%loop-value-1%"
		loop yaml list "Messages.Death" from "sg.language":
			set {_msg} to loop-value-1
			replace all "{victim}" with "%{_p}%" in {_msg}
			replace all "{killer}" with "%{_killer-temp}%" in {_msg}
			replace all "{playing}" with "%size of {-sg::cache::arena::%{_arena}%::players::alive::*}%" in {_msg}
			replace all "{spectating}" with "%size of {-sg::cache::arena::%{_arena}%::players::spec::*}%" in {_msg}
			send colored {_msg} to sg_arenaPlayers({_arena})
		send replacer "{victim}" and "{points}" with "%{_p}%" and "%{_points}%" in yaml value "Messages.Kill" from "sg.language" to {_killer-temp}	
		send replacer "{points}" with "%{_points}%" in yaml value "Messages.Death" from "sg.language" to {_p}	
	sg_setspec({_p}, {_arena})		
	if {-sg::arena.%{_arena}%::status} is "IN-GAME" or "DEATHMATCH":
		if size of {-sg::cache::arena::%{_arena}%::players::alive::*} = 3:	
			sg_deathmatch({_arena})		
	if size of {-sg::cache::arena::%{_arena}%::players::alive::*} = 1:
		sg_winner({_arena})	

on damage of player:
	if {-sg::cache::player::%victim%::state} is "IN-GAME":
		if {-sg::arena.%{-sg::cache::player::%victim%::arena}%::status} is "IN-GAME" or "DEATHMATCH":
			if attacker is a player:
				set metadata value "SG-LAST-HIT" of victim to attacker
			if damage >= health of victim:
				cancel event
				metadata value "SG-DEATH" of victim is not set
				set metadata value "SG-DEATH" of victim to "true"
				loop all players:
					hide victim from loop-player	
				loop all items in victim's inventory:
					drop loop-value-1 at victim's location
				sg_player_death(victim)
		else:
			cancel event
			damage cause is void
			teleport victim to yaml value "LOCATION.CENTER" from "sg.arena.%{-sg::cache::player::%victim%::arena}%"
	if {-sg::cache::player::%victim%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event
		damage cause is void
		if {-sg::cache::player::%victim%::state} is "IN-LOBBY":
			teleport victim to yaml value "LOCATIONS.MAIN-LOBBY" from "sg.config"
		if {-sg::cache::player::%victim%::state} is "IN-GAME-SPEC":
			teleport victim to yaml value "CENTER" from "sg.arena.%{-sg::cache::player::%victim%::arena}%"
	if {-sg::cache::player::%attacker%::state} is "IN-GAME-SPEC":
		cancel event

on break:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME" or "DEATHMATCH":
			loop {-sg::allowed-to-break::*}:
				"%loop-value-1%" contains "%type of event-block%"	
				stop
			cancel event
		else:
			cancel event
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event

on place:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME" or "DEATHMATCH":
			loop {-sg::allowed-to-place::*}:
				"%loop-value-1%" contains "%type of event-block%"
				stop
			cancel event		
		else:
			cancel event
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event

on right click on chest or trapped chest:	
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::CHEST::%location of event-block%} is not set:
			sg_chest_fill(location of event-block, {-sg::cache::player::%player%::arena})
			set {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::CHEST::%location of event-block%} to true
			sg_stats("add", player, "chests", 1)

on pressure plate:
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC":
		cancel event

on pickup:
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event

on drop:
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event
	if {-sg::cache::player::%player%::state} is "IN-GAME":	
		if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "WAITING" or "STARTING" or "RESTARTING":
			cancel event

on gamemode change to survival:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "STARTING" or "WAITING":
			cancel event
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC":
		cancel event

on hunger bar change:
	if {-sg::cache::player::%player%::state} is set:
		set player's hunger to 20

on PlayerArmorStandManipulateEvent:
	if {-sg::cache::player::%event.getPlayer()%::state} is set:
		cancel event

on PlayerInteractEvent:
	if {-sg::cache::player::%event.getPlayer()%::state} is "IN-LOBBY":
		if "%event.getAction()%" is "PHYSICAL":
			if "%event.getClickedBlock()%" does not contain "plate":
				cancel event

on inventory click:
	if {-sg::cache::player::%player%::state} is set:
		if {-sg::arena.%{-sg::cache::player::%player%::arena}%::status} is "WAITING" or "STARTING" or "RESTARTING":
			cancel event

on vehicle enter:
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC" or "IN-LOBBY":
		cancel event

function sg_projectile_effect(p: player, projectile: entity):
	wait a tick
	if {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected} is "0":
		stop
	set {_w} to world of {_projectile}		
	set {_trail} to {-sg::player::stats::%{_p}%::Data.ArrowTrails.Selected}
	set {_amount} to yaml value "ArrowTrails.List.%{_trail}%.Amount" from "sg.shop"	
	set {_type} to yaml value "ArrowTrails.List.%{_trail}%.Type" from "sg.shop"
	set {_particle} to yaml value "ArrowTrails.List.%{_trail}%.Particle" from "sg.shop"
	set metadata value "BW_GAME" of {_projectile} to true
	if {_type} = "BLOCK_CRACK":
		set {_material} to new MaterialData(Material.."%{_particle}%")
		if {_material} is not set:
			stop
		while metadata value "BW_GAME" of {_projectile} is set:
			add 1 to {_stuff}
			FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, location of {_projectile}, {_amount} and {_material})
			{_stuff} = 150:
				stop
			wait a tick
	if {_type} is not "BLOCK_CRACK":
		set {_effect} to ParticleType.."%{_particle}%"
		if {_effect} is not set:
			stop
		while metadata value "BW_GAME" of {_projectile} is set:
			add 1 to {_stuff}
			FastParticle.spawnParticle({_w}, {_effect}, location of {_projectile} and {_amount})
			{_stuff} = 150:
				stop
			wait a tick

on shoot:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if type of event-projectile is arrow:
			{-sg::player::stats::%shooter%::Data.ArrowTrails.Selected} is set
			sg_projectile_effect(shooter, projectile)	

on right click:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if event-item is {-sg::cache::Items.LEAVE.Item::language}:
			cancel event
			if yaml value "Confirm-Leave.Enabled" from "sg.menus" is true:
				open chest inventory with 1 rows named yaml value "Confirm-Leave.Menu" from "sg.menus" to player
				wait a tick
				make a gui slot 5 of player with {-sg::cache::General.Deny.Item::menus} to run:
					close player's inventory 
				make a gui slot 3 of player with {-sg::cache::General.Accept.Item::menus} to run function sg_leave(player)
			else:
				sg_leave(player)
	if {-sg::cache::player::%player%::state} is "IN-LOBBY":
		cancel event
		if event-item is {-sg::cache::Items.Join-Arenas.Item::language}:
			sg_list(player)
		if event-item is {-sg::cache::Items.Lobby-Leave.Item::language}:
			sg_leave(player)
		if event-item is {-sg::cache::Items.Shop.Item::language}:
			sg_shop(player)
		if event-item is {-sg::cache::Items.Custom-Item.Item::language}:
			make player execute command yaml value "Items.Custom-Item.Command" from "sg.config"
	if {-sg::cache::player::%player%::state} is "IN-GAME-SPEC":
		cancel event
		if event-item is {-sg::cache::Items.Teleporter.Item::language}:
			sg_menu_spectator(player)
		if event-item is {-sg::cache::Items.Leave.Item::language}:
			sg_leave(player)
		if event-item is {-sg::cache::Items.Spectator-Settings.Item::language}:
			sg_menu_spectator_settings(player)
		if event-item is {-sg::cache::Items.Sponsor.Item::language}:
			sg_menu_sponsor(player)
		if event-item is {-sg::cache::Items.Bounty.Item::language}:	
			sg_menu_bounty(player)		
	if metadata value "SG-SETUP" of player is set:
		cancel event
		set {_arena} to metadata value "SG-SETUP" of player
		if name of item is "&8&l[&bARENA &8&l- &bSETTINGS&8&l]":
			sg_menu_setup(player, "ARENA-SETTING")
		name of item is "&8&l[&aADD &8&l- &bSPAWNPOINT&8&l]":
			teleport player to player
			set {_size} to size of yaml nodes with keys "SPAWNPOINTS" from "sg.arena.%{_arena}%" + 1		
			set yaml value "SPAWNPOINTS.%{_size}%" from "sg.arena.%{_arena}%" to location of player
			send "{@setup-prefix}Added spawnpoint &a%{_size}%&7!"
		name of item is "&8&l[&cREMOVE &8&l- &bSPAWNPOINT&8&l]":				
			set {_size} to size of yaml nodes with keys "SPAWNPOINTS" from "sg.arena.%{_arena}%"
			{_size} > 0:
				delete yaml value "SPAWNPOINTS.%{_size}%" from "sg.arena.%{_arena}%"
				send "{@setup-prefix}Removed spawnpoint &a%{_size}%&7!"
			else:
				send "{@setup-prefix}No Spawnpoints left!"	

function sg_cache_item(dir: text, value: text, item: text):
	if yaml value {_value} from "sg.%{_dir}%" is "custom player head":
		yaml value "%{_item}%.Id" from "sg.%{_dir}%" and yaml value "%{_item}%.Value" from "sg.%{_dir}%" is set:
			set {_ID} to yaml value "%{_item}%.Id" from "sg.%{_dir}%"
			set {_TEXTURE} to yaml value "%{_item}%.Value" from "sg.%{_dir}%"
			set {-sg::cache::%{_value}%::%{_dir}%} to player head with custom nbt "{Unbreakable:1,HideFlags:4,SkullOwner:{Id:""%{_ID}%"",Properties:{textures:[{Value:""%{_TEXTURE}%""}]}}}"
#			else:
#				broadcast  &aid or value for item &3%{_item}% &afrom &3%{_dir}% &ais not set!"
	else:
		yaml value {_value} from "sg.%{_dir}%" parsed as material is set:
			set {-sg::cache::%{_value}%::%{_dir}%} to yaml value {_value} from "sg.%{_dir}%" parsed as material
		else:	
			set {_item} to yaml value {_value} from "sg.%{_dir}%"
			broadcast "&aitem &3%{_item}% &afrom &3%{_dir}% &ais not valid!"
	yaml value "%{_item}%.Name" from "sg.%{_dir}%" is set:
		set name of {-sg::cache::%{_value}%::%{_dir}%} to yaml value "%{_item}%.Name" from "sg.%{_dir}%"
	yaml list "%{_item}%.Lore" from "sg.%{_dir}%" is set:
		yaml list "%{_item}%.Lore" from "sg.%{_dir}%" is not ""
		loop yaml list "%{_item}%.Lore" from "sg.%{_dir}%":
			set {_lore} to loop-value-1
			add 1 to {_line}
			set line {_line} of the lore of {-sg::cache::%{_value}%::%{_dir}%} to colored {_lore}
#	broadcast "{-sg::cache::%{_value}%::%{_dir}%}, %{-sg::cache::%{_value}%::%{_dir}%}%"

function sg_check_yaml_item(dir: text, value: text, name: text, slot: text, item: text, lore: text, id: text = "", texture: text = ""):
	{_name} is not "null":
		sg_check_yaml({_dir}, "%{_value}%.Name", {_name}, "text")
	{_item} is not "null":
		sg_check_yaml({_dir}, "%{_value}%.Item", {_item}, "material")
		yaml value "%{_value}%.Item" from "sg.%{_dir}%" is "custom player head"
		{_item} is "custom player head":
			{_id} and {_texture} is set
			sg_check_yaml({_dir}, "%{_value}%.Id", {_id})
			sg_check_yaml({_dir}, "%{_value}%.Value", {_texture})
	{_slot} is not "null":
		sg_check_yaml({_dir}, "%{_value}%.Slot", {_slot}, "number")
	{_lore} is not "null":
		sg_check_yaml({_dir}, "%{_value}%.Lore", {_lore}, "list")
	sg_cache_item({_dir}, "%{_value}%.Item", {_value}) 

function sg_check_yaml(dir: text, value: text, set: text, type: text = "text"):
	yaml value {_value} from "sg.%{_dir}%" is not set:
		if {_type} is "text" or "material":
			set yaml value {_value} from "sg.%{_dir}%" to {_set}
		if {_type} is "number":
			set yaml value {_value} from "sg.%{_dir}%" to {_set} parsed as number
		if {_type} is "boolean":
			set yaml value {_value} from "sg.%{_dir}%" to {_set} parsed as boolean
	if {_type} is "list":
		yaml list {_value} from "sg.%{_dir}%" is not set
		loop {_set} split at "||":
			add loop-value-1 to yaml list {_value} from "sg.%{_dir}%"
	if {_type} is "material":
		set {_item} to first element of {_value} split at ".Item"
		sg_cache_item({_dir}, {_value}, {_item})

on load:
	loop currently loaded yaml files:
		loop-value-1 contains "sg.arena" or "sg.config" or "sg.menus" or "sg.language" or "sg.shop" or "sg.data"
		unload yaml loop-value-1
	loop all players:
		if {-sg::cache::player::%loop-value-1%::state} is set:
			add loop-value-1 to {_players::*}	
	loop "config", "menus", "language", "data" and "shop":
		load yaml "plugins/LeafSG/%loop-value-1%.yml" as "sg.%loop-value-1%"
	load yaml "plugins/LeafSG/arenas/temp.yml" as "temp"
	delete yaml "temp"
	delete {-sg::cache::*}	
	sg_check_yaml("language", "Messages.Prefix", "&6Survival Games &8» &7")
	sg_check_yaml("config", "Timers.Waiting", "30", "number")
	sg_check_yaml("config", "Timers.Waiting-Full", "10", "number")
	sg_check_yaml("config", "Timers.Game", "10", "number")	
	sg_check_yaml("config", "Timers.Pre-Deathmatch", "15", "number")		
	sg_check_yaml("config", "Timers.Deathmatch", "3", "number")			
	sg_check_yaml("config", "Timers.Win-Lenght", "15", "number")
	sg_check_yaml("config", "MySQL.Enabled", "false", "boolean")		
	sg_check_yaml("config", "MySQL.Host", "localhost")		
	sg_check_yaml("config", "MySQL.Port", "3306", "number")	
	sg_check_yaml("config", "MySQL.Username", "root")	
	sg_check_yaml("config", "MySQL.Password", "test")	
	sg_check_yaml("config", "MySQL.Database", "mysql")	
	sg_check_yaml("config", "MySQL.Tablename", "sg_stats")	
	sg_check_yaml("config", "MySQL.Use_ssl", "false", "boolean")	
	sg_check_yaml("config", "Rewards.Coins.Win", "30", "number") 	
	sg_check_yaml("config", "Rewards.Coins.Kill", "5", "number")
	sg_check_yaml("config", "Rewards.Percentage-System.Enabled", "true", "boolean")	
	sg_check_yaml("config", "Rewards.Percentage-System.Minimum.Enabled", "true", "boolean")	
	sg_check_yaml("config", "Rewards.Percentage-System.Minimum.Rewards", "5", "number")		
	sg_check_yaml("config", "Rewards.Percentage-System.AllowNegativeBalance", "true", "boolean") 	
	sg_check_yaml("config", "Bungeecord.Enabled", "false", "boolean")
	sg_check_yaml("config", "Bungeecord.FallbackServer", "lobby")
	sg_check_yaml("config", "Chat.Lobby", "&8[&e{coins}&8] &7{player} &8&l» &7{message}")
	sg_check_yaml("config", "Chat.Game", "&7{player} &8&l» &7{message}")
	sg_check_yaml("config", "Chat.WaitingLobby", "&7{player} &8&l» &7{message}")
	sg_check_yaml("config", "Chat.Spectator", "&cSpectator &c» &7{player} &8&l» &7{message}")
	sg_check_yaml("config", "Commands.Kill", "mysterydust add {killer} 3 msg=false", "list")
	sg_check_yaml("config", "Commands.Win", "mysterydust add {player} 50 msg=false", "list")
	sg_check_yaml("config", "Blocks.Allowed-To-Place", "Oak Leaf||Spruce Leaf||Birch Leaf||Jungle Leaf||Acacia Leaf||Oak Leaf", "list")	
	sg_check_yaml("config", "Blocks.Allowed-To-Break", "Oak Leaf||Spruce Leaf||Birch Leaf||Jungle Leaf||Acacia Leaf||Oak Leaf", "list")	
	sg_check_yaml("config", "Chests.Default.Min-Items", "5", "number")
	sg_check_yaml("config", "Chests.Default.Max-Items", "8", "number")
	sg_check_yaml("config", "Chests.Default.Items", "1 carrot plant||1 pumpkin pie||1 raw porkchop||1 raw chicken||1 cookie||1 cooked fish||1 stone sword||1 wooden sword||1 stone axe||1 wooden axe||1 fishing rod||1 bow||5 arrows||1 iron ingot||1 gold ingot||1 flint||1 stick||1 feather||1 leather helmet||1 leather chestplate||1 leather leggings||1 leather boots", "list")	
	sg_check_yaml("config", "Chests.TIER-2.Min-Items", "5", "number")
	sg_check_yaml("config", "Chests.TIER-2.Max-Items", "8", "number")
	sg_check_yaml("config", "Chests.TIER-2.Items", "1 stone sword||1 diamond||1 carrot||1 golden apple||1 flint and steel||1 bread||1 baked potato||1 cooked beef||1 cooked porkchop||1 cooked chicken||1 iron helmet||1 iron chestplate||1 iron leggings||1 iron boots||1 chainmail helmet||1 chainmail chestplate||1 chainmail leggings||1 chainmail boots||1 golden helmet||1 golden chestplate||1 golden leggings||1 golden boots||1 bow||5 arrows", "list")			
	sg_check_yaml("language", "Game-Status.WAITING", "&aLOBBY")
	sg_check_yaml("language", "Game-Status.STARTING", "&aStarting")	
	sg_check_yaml("language", "Game-Status.IN-GAME", "&aLiveGame")
	sg_check_yaml("language", "Game-Status.PRE-DEATHMATCH", "&aPreDeathmatch")	
	sg_check_yaml("language", "Game-Status.DEATHMATCH", "&aDeathmatch")	
	sg_check_yaml("language", "Game-Status.RESTARTING", "&aEndGame")
	minecraft version contains "1.8":
		sg_check_yaml("config", "Sounds.KILL.Sound", "ORB_PICKUP")
		sg_check_yaml("config", "Sounds.JOIN-ARENA.Sound", "LEVEL_UP")
		sg_check_yaml("config", "Sounds.STARTING-ARENA.Sound", "LEVEL_UP")
		sg_check_yaml("config", "Sounds.NOT-ENOUGHT-PLAYERS.Sound", "ANVIL_BREAK")	
	else:
		sg_check_yaml("config", "Sounds.KILL.Sound", "BLOCK_NOTE_HAT")
		sg_check_yaml("config", "Sounds.JOIN-ARENA.Sound", "ENTITY_PLAYER_LEVELUP")
		sg_check_yaml("config", "Sounds.STARTING-ARENA.Sound", "ENTITY_PLAYER_LEVELUP")
		sg_check_yaml("config", "Sounds.NOT-ENOUGHT-PLAYERS.Sound", "BLOCK_ANVIL_BREAK")	
	loop "KILL", "JOIN-ARENA", "STARTING-ARENA" and "NOT-ENOUGHT-PLAYERS":
		sg_check_yaml("config", "Sounds.%loop-value-1%.Volume", "1.0", "number")
		sg_check_yaml("config", "Sounds.%loop-value-1%.Pitch", "1.0", "number")		
	sg_check_yaml("language", "Signs.Arenas.Line.1", "&8[&6SurvivalGames&8]")
	sg_check_yaml("language", "Signs.Arenas.Line.2", "&e{status}")
	sg_check_yaml("language", "Signs.Arenas.Line.3", "&b{arena}")
	sg_check_yaml("language", "Signs.Arenas.Line.4", "&8({playing}/{max})")
	sg_check_yaml("language", "Signs.Arenas.AutoJoin", "&c&lPlay")
	sg_check_yaml("language", "Signs.Leaderboards.Line-1", "&7&l➜ &a&lTOP")		
	sg_check_yaml("language", "Signs.Leaderboards.Line-2", "&7« &b{TOP} &8##{place} &7»")		
	sg_check_yaml("language", "Signs.Leaderboards.Line-3", "&e{player}")		
	sg_check_yaml("language", "Signs.Leaderboards.Line-4", "&aScore: &3{value}")	
	sg_check_yaml("config", "Settings.Leaderboards.Type", "SKULLS")										
	sg_check_yaml("config", "Settings.Leaderboards.EmptyPlaceReplace", "Loading...")
	sg_check_yaml("config", "Settings.Leaderboards.SmallArmorStand", "true", "boolean")	
	sg_check_yaml("config", "Settings.DeathmatchRadius", "50", "number")	
	sg_check_yaml("config", "Settings.PerArenaTablist", "true", "boolean")
	sg_check_yaml("language", "Messages.Join", "&a&l» &7{player} &6Joined &7({playing}&7/{max}&7)")
	sg_check_yaml("language", "Messages.Leave", "&c&l« &7{player} &6has left &7({playing}&7/{max}&7)")
	sg_check_yaml("language", "Messages.Kill", "&3You've gained &8[&e{points}&8] &3points for killing {victim}&8!")
	sg_check_yaml("language", "Messages.Death", "&aOnly &8[&6{playing}&8] &atributes remain!||&AThere are &8[&6{spectating}&8] &aspectators watching the game.", "list")
	sg_check_yaml("language", "Messages.Death", "&3You've lost &8[&e{points}&8] &3points for dying&8!")	
	sg_check_yaml("language", "Messages.StartingGame", "&8[&e{seconds}&8] &cseconds until the games begin!")	
	sg_check_yaml("language", "Messages.StartGame", "&3The games have begun!")		
	sg_check_yaml("language", "Messages.DeathmatchStarting", "&8[&e{seconds}&8] &cseconds until deathmatch begin!")
	sg_check_yaml("language", "Messages.DeathmatchStart", "&3The Deathmatch has begun!")					
	sg_check_yaml("language", "Messages.NotEnoughPlayers", "&cThere are not enought players to start!")
	sg_check_yaml("language", "Messages.Teleported-to", "&7Teleported to &7{player}")
	sg_check_yaml("language", "Messages.Searching-arenas", "&7Searching for available arenas...")
	sg_check_yaml("language", "Messages.DenyCommand", "&7You can't use this command in game!")
	sg_check_yaml("language", "Messages.Not-enought-coins", "&7You don't have enought coins")
	sg_check_yaml("language", "Messages.Player-not-found", "&7Player not found.")
	sg_check_yaml("language", "Messages.NoPermission", "&cYou are not allowed to use this.")
	sg_check_yaml("language", "Messages.AlreadyInGame", "&cYou can't do this while playing!")
	sg_check_yaml("language", "Messages.NotInGame", "&cYou are not in game!")
	sg_check_yaml("language", "Messages.SpecifyArenaName", "&cYou must specify an arena name!")
	sg_check_yaml("language", "Messages.InvalidArena", "&cThis arena doesn't even exists!")
	sg_check_yaml("language", "Messages.MustBeInLobby", "&cYou must be in lobby do do this!")
	sg_check_yaml("language", "Messages.Not-now", "&7You can't do this right now.")
	sg_check_yaml("language", "Messages.ForcedStart", "&e{player} &cForced arena to start with his almighty powers!")
	sg_check_yaml("language", "Messages.ArenaFull", "&cThis arena is full of players!")
	sg_check_yaml("language", "Messages.ArenaRestarting", "&cThis arena is currently being restarted!")
	sg_check_yaml("language", "Messages.SponsorPlayer", "&7You have sponsored &e{player}")	
	sg_check_yaml("language", "Messages.GotSponsored", "&7You got sponsored by &e{player}")	
	sg_check_yaml("language", "Messages.BountySet", "&7A bounty has been set on &b{target} &7by &e{player} &7for &8[&e{points}&8] &7points.")		
	sg_check_yaml("language", "Messages.BountyClaim", "&7A bounty of &8[&e{points}&8] &7has been claimed after death of &e{victim}")	
	sg_check_yaml("language", "Messages.BountyAlreadySet", "&7A bounty is already set for this Player.")			
	sg_check_yaml("language", "Messages.Summary", "&6▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬||||&8▪ &f&lSurvival Games &8▪||||&eWINNER &f- &3{player}||||&c➜ &7Kills &8➥ &e{kills}||||&6▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬", "list")	
	sg_check_yaml("language", "Messages.Help.PLAYER", "&8&l«&7&l&m-------&8[ &8&l➩ &6&nSurvival Games&r &8]&7&l&m-------&r&8&l»||&7&l➜ &a/sg list||&7&l➜ &a/sg join &8(&7arena_name&8)||&7&l➜ &a/sg autojoin||&7&l➜ &a/sg leave||&8&l«&7&l&m--------------------&r&8&l»", "list")
	sg_check_yaml("language", "Messages.Help.ADMIN", "&8&l«&7&l&m-------&8[ &8&l➩ &6&nSurvival Games&r &8]&7&l&m-------&r&8&l»||&7&l➜ &a/sg start||&7&l➜ &a/sg coins take/set/give &8(&7player&8)||&7&l➜ &a/sg update-Leaderboards||&7&l➜ &a/sg resetstats &8(&7player&8)||&7&l➜ &a/sg reload||&8&l«&7&l&m--------------------&r&8&l»", "list")
	sg_check_yaml("language", "Messages.Help.SETUP", "&8&l«&7&l&m-------&8[ &8&l➩ &6&nSurvival Games&r &8]&7&l&m-------&r&8&l»||&7&l➜ &a/sg setLobby||&7&l➜ &a/sg createArena &8(&7arena_name&8)||&7&l➜ &a/sg deleteArena &8(&7arena_name&8)||&7&l➜ &a/sg editArena &8(&7arena_name&8)||&7&l➜ &a/sg chestTool &8(&7arena_name&8)||&7&l➜ &a/sg editMode||&7&l➜ &a/sg setLobbyLeave||&8&l«&7&l&m--------------------&r&8&l»", "list")	
	sg_check_yaml("language", "Messages.ArrowTrail.Purchase", "&aPurchased &e{name} &aTrail.")	
	sg_check_yaml("language", "Messages.ArrowTrail.Select", "&aSelected &e{name} &aTrail.")	
	sg_check_yaml("language", "Messages.None", "&eNone")		
	sg_check_yaml("language", "Messages.LoadingStats", "&aLoading your stats...")	
	sg_check_yaml_item("language", "Items.Teleporter", "&8» &aPlay teleporter &7(Right Click)", "0", "compass", "")
	sg_check_yaml_item("language", "Items.Spectator-Settings", "&8» &bSpectator Settings &7(Right Click)", "4", "redstone comparator item", "")
	sg_check_yaml_item("language", "Items.Bounty", "&8» &bBounty &7(Right Click)", "6", "eye of ender", "")	
	sg_check_yaml_item("language", "Items.Sponsor", "&8» &bSponsor Player &7(Right Click)", "7", "gold ingot", "")	
	sg_check_yaml_item("language", "Items.Leave", "&8» &6Leave the game", "8", "magma cream", "")
	sg_check_yaml_item("language", "Items.Join-Arenas", "&8» &3Play &7(Right Click)", "0", "diamond axe", "")
	sg_check_yaml_item("language", "Items.Shop", "&8» &3Shop &7(Right Click)", "4", "anvil", "")
	sg_check_yaml_item("language", "Items.Lobby-Leave", "&8» &6Leave the lobby &7(Right Click)", "8", "magma cream", "")
	sg_check_yaml_item("language", "Items.Custom-Item", "&8» &7Example Item", "9", "air", "")
	sg_check_yaml("language", "Items.Custom-Item.Command", "example command")	
	sg_check_yaml("language", "Titles.Join-Lobby.Title", "&8◄ &e&lSurvival Games &8►")
	sg_check_yaml("language", "Titles.Join-Lobby.Subtitle", "&7Welcome")
	sg_check_yaml("language", "Titles.Win.Title", "{player} WON!")
	sg_check_yaml("language", "Titles.Win.Subtitle", "&aCongratulations!")
	sg_check_yaml("language", "Titles.StartingGame.Title", "&6{seconds}")
	sg_check_yaml("language", "Titles.StartingGame.Subtitle", "")
	sg_check_yaml("language", "Titles.Start.Title", "")
	sg_check_yaml("language", "Titles.Start.Subtitle", "&aFight")	
	loop "Join-Lobby", "Win", "StartingGame" and "Start":
		loop-value-1 is "StartingGame":
			set {_fade} to 0
		else:
			set {_fade} to 20
		sg_check_yaml("language", "Titles.%loop-value-1%.Duration", "20", "number")
		sg_check_yaml("language", "Titles.%loop-value-1%.FadeIn", "%{_fade}%", "number")
		sg_check_yaml("language", "Titles.%loop-value-1%.FadeOut", "%{_fade}%", "number")	
	sg_check_yaml("language", "Scoreboard.LOBBY.Title", "&6❖ &e&nSurvival Games&r &6❖")
	sg_check_yaml("language", "Scoreboard.LOBBY.Update", "3 seconds")	
	sg_check_yaml("language", "Scoreboard.LOBBY.Lines", "||&6⤨ &fYour Stats||||&3⇲ &7Coins &e{coins}||&3⇲ &7Wins &e{wins}||&3⇲ &7Kills &e{kills}||&3⇲ &7Chests &e{chests}||&3⇲ &7Deaths &e{deaths}||||&6⤨ &fPlaying||&3⇲ &e{online}||||&7❒ &b&nMC-MARKET.ORG&r &7❒", "list")
	loop "WAITING", "STARTING", "IN-GAME", "PRE-DEATHMATCH", "DEATHMATCH" and "RESTARTING":
		sg_check_yaml("language", "Scoreboard.%loop-value-1%.Title", "&6&lSG &8&l- {status}")
		sg_check_yaml("language", "Scoreboard.%loop-value-1%.Update", "1 second")		
		sg_check_yaml("language", "Scoreboard.%loop-value-1%.Lines", "&6➥ &fYou||&8▪ &7Kills: &e{kills}||&8▪ &7Name: &e{player}||||&6➥ &fTime||&8▪ &e{game-time}||||&6➥ &fMap||&8▪ &e{arena}||||&6➥ &fPlayers||&8▪ &7Playing: {playing}||&8▪ &7Watching: {spectating}||||&7❒ &b&nMC-MARKET.ORG&r &7❒", "list")
	sg_check_yaml_item("menus", "General.Main-Page", "&8» &7Main Page &8&l«", "null", "book", "")
	sg_check_yaml_item("menus", "General.Next-Page", "&8» &7Next Page", "null", "custom player head", "", "d513d666-0992-42c7-9aa6-e518a83e0b38", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMTliZjMyOTJlMTI2YTEwNWI1NGViYTcxM2FhMWIxNTJkNTQxYTFkODkzODgyOWM1NjM2NGQxNzhlZDIyYmYifX19")
	sg_check_yaml_item("menus", "General.Previos-Page", "&8&l« &7Previous Page", "null", "custom player head", "", "2391d533-ab09-434d-9980-adafde4057a3", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYmQ2OWUwNmU1ZGFkZmQ4NGU1ZjNkMWMyMTA2M2YyNTUzYjJmYTk0NWVlMWQ0ZDcxNTJmZGM1NDI1YmMxMmE5In19fQ==")
	sg_check_yaml_item("menus", "General.Back", "&8» &7Back", "null", "custom player head", "", "5ca62fac-d094-4346-8361-e1dfdd970607", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNzQzNzM0NmQ4YmRhNzhkNTI1ZDE5ZjU0MGE5NWU0ZTc5ZGFlZGE3OTVjYmM1YTEzMjU2MjM2MzEyY2YifX19")	
	sg_check_yaml_item("menus", "General.Accept", "&8➥ &a&nAccept", "1", "custom player head", "", "81e9cb25-3fc3-4b41-8fa6-536bf143d560", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDMxMmNhNDYzMmRlZjVmZmFmMmViMGQ5ZDdjYzdiNTVhNTBjNGUzOTIwZDkwMzcyYWFiMTQwNzgxZjVkZmJjNCJ9fX0=")	
	sg_check_yaml_item("menus", "General.Deny", "&8➥ &c&nCancel", "3", "custom player head", "", "5ecfabf0-5253-47b0-a44d-9a0c924081b9", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYmViNTg4YjIxYTZmOThhZDFmZjRlMDg1YzU1MmRjYjA1MGVmYzljYWI0MjdmNDYwNDhmMThmYzgwMzQ3NWY3In19fQ==")		
	sg_check_yaml_item("menus", "General.None", "&8» &7None", "null", "barrier", "")	
	sg_check_yaml("menus", "Arenas-Browser.Menu", "&8» &7Survival Games Arenas")
	sg_check_yaml("menus", "Arenas-Browser.Background", "blue glass pane", "material")
	sg_check_yaml("menus", "Arenas-Browser.Lore", "&8&l«&7&l&m------------------&r&8&l»||||&8&l» &7Name&8: &e&l{arena}||||&8&l» &7Status: {status}||||&8&l» &7Players&8: &8&l(&b&l{playing}&7/&b&l{max}&8&l)||||&8&l» &7Click to Join.||||&8&l«&7&l&m------------------&r&8&l»", "list")
	sg_check_yaml_item("menus", "Arenas-Browser.AutoJoin", "&8➥ &a&nQuick Join", "null", "custom player head", "||&8&l➩ &eClick to quick join.", "d54c8e17-7da2-4255-b3af-4ca87f404a51", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDM0NjdhNTMxOTc4ZDBiOGZkMjRmNTYyODVjNzI3MzRkODRmNWVjODhlMGI0N2M0OTMyMzM2Mjk3OWIzMjNhZiJ9fX0=")			
	sg_check_yaml("menus", "Shop.Menu", "&8» &7Shop")
	sg_check_yaml("menus", "Shop.Menu-Confirm", "&8» &7Confirm Purchase")	
	sg_check_yaml_item("menus", "Shop.ArrowTrails", "&3❒ &7Projectile Trails", "22", "bow", "||&8➥ &7Change your projectile||&7particle trail effect.||||&8➥ &7Unlocked &a{bought-ArrowTrails}&7/&a{total-ArrowTrails}||||&a⬊ &eClick to browse.")
	sg_check_yaml("menus", "Spectator.Menu", "&8» &7Player Teleporter")
	sg_check_yaml("menus", "Spectator.Player-Format.Name", "&7{player}")
	sg_check_yaml("menus", "Spectator.Player-Format.Lore", "&3&l» &7&nClick To Teleport", "list")		
	sg_check_yaml("menus", "Bounty.Menu", "&8» &7&nBounty &r &8«")	
	sg_check_yaml("menus", "Bounty.Player-Format.Name", "&7{player}")
	sg_check_yaml("menus", "Bounty.Player-Format.Lore", "&8❒ &e&nClick to put a bounty on this player.&r", "list")	
	sg_check_yaml("menus", "Confirm-Leave.Enabled", "true", "boolean")		
	sg_check_yaml("menus", "Confirm-Leave.Menu", "&8» &7&nConfirm Leave")		
	sg_check_yaml("menus", "Sponsor.Menu", "&8» &7&nSponsor Player&r &8«")	
	sg_check_yaml("menus", "Sponsor.Player-Format.Name", "&7{player}")
	sg_check_yaml("menus", "Sponsor.Player-Format.Lore", "&8❒ &e&nClick to sponsor this player.&r", "list")		
	sg_check_yaml_item("menus", "Sponsor.Items.Fishing Rod", "&e1 &8- &a&nFishing rod", "10", "fishing rod", "&e➥ &7Cost: &e200 &7Points||&8➥ &7Click to Sponsor")		
	sg_check_yaml("menus", "Sponsor.Items.Fishing Rod.Cost", "200", "number")
	sg_check_yaml_item("menus", "Sponsor.Items.Flint and steel", "&e1 &8- &a&nFlint and Steel", "11", "flint and steel", "&e➥ &7Cost: &e150 &7Points||&8➥ &7Click to Sponsor")	
	sg_check_yaml("menus", "Sponsor.Items.Flint and steel.Cost", "150", "number")	
	sg_check_yaml_item("menus", "Sponsor.Items.Bow", "&e1 &8- &a&nBow", "12", "bow", "&e➥ &7Cost: &e100 &7Points||&8➥ &7Click to Sponsor")
	sg_check_yaml("menus", "Sponsor.Items.Bow.Cost", "100", "number")		
	sg_check_yaml_item("menus", "Sponsor.Items.Iron ingot", "&e1 &8- &a&nIron Ingot", "14", "iron ingot", "&e➥ &7Cost: &e100 &7Points||&8➥ &7Click to Sponsor")
	sg_check_yaml("menus", "Sponsor.Items.Iron ingot.Cost", "100", "number")		
	sg_check_yaml_item("menus", "Sponsor.Items.Arrow", "&e5 &8- &a&nArrow", "15", "5 arrow", "&e➥ &7Cost: &e50 &7Points||&8➥ &7Click to Sponsor")
	sg_check_yaml("menus", "Sponsor.Items.Arrow.Cost", "50", "number")				
	sg_check_yaml_item("menus", "Sponsor.Items.Cake", "&e1 &8- &a&nCake", "16", "cake", "&e➥ &7Cost: &e50 &7Points||&8➥ &7Click to Sponsor")
	sg_check_yaml("menus", "Sponsor.Items.Cake.Cost", "50", "number")	
	sg_check_yaml_item("menus", "Sponsor.Items.Ender Pearl", "&e1 &8- &a&nEnder Pearl", "22", "ender pearl", "&e➥ &7Cost: &e500 &7Points||&8➥ &7Click to Sponsor")	
	sg_check_yaml("menus", "Sponsor.Items.Ender Pearl.Cost", "500", "number")	
	sg_check_yaml("menus", "Shop.Confirm.Deny", "&c&nDeny")	
	sg_check_yaml("menus", "Shop.Confirm.Accept", "&a&nAccept")		
	sg_check_yaml("menus", "Shop.Confirm.Menu", "&8» &7Confirm Purchase")	
	sg_check_yaml("shop", "ArrowTrails.Menu", "&8» &7Arrow Trails")
	sg_check_yaml("shop", "ArrowTrails.Current", "&8» &7Current Trail.")	
	sg_check_yaml("shop", "ArrowTrails.Background", "air", "background")			
	sg_check_yaml("shop", "ArrowTrails.Purchased", "&8➥ &7Click to Select", "list")	
	sg_check_yaml("shop", "ArrowTrails.Not_Purchased", "&8➥ &7Cost: &e{price}||||&8➥ &7Click to Purchase", "list")
	sg_check_yaml("shop", "ArrowTrails.Not_Purchased_Preview", "||&8➥ &7Cost: &e{price}", "list")	
	sg_check_yaml("menus", "Spectator-Settings.Menu", "&8➥ &7Spectator Settings")
	sg_check_yaml_item("menus", "Spectator-Settings.Speed.0", "&a&nNo Speed", "11", "leather boots", "")
	sg_check_yaml_item("menus", "Spectator-Settings.Speed.1", "&a&nSpeed I", "12", "chain boots", "")
	sg_check_yaml_item("menus", "Spectator-Settings.Speed.2", "&a&nSpeed II", "13", "iron boots", "")
	sg_check_yaml_item("menus", "Spectator-Settings.Speed.3", "&a&nSpeed III", "14", "gold boots", "")
	sg_check_yaml_item("menus", "Spectator-Settings.Speed.4", "&a&nSpeed IV", "15", "diamond boots", "")
	sg_check_yaml_item("menus", "Spectator-Settings.Night-Vision.ON", "&a&nEnable Night Vision", "22", "eye of ender", "&7Click to enable night vision!")
	sg_check_yaml_item("menus", "Spectator-Settings.Night-Vision.OFF", "&c&nDisable Night Vision", "22", "ender pearl", "&7Click to disable night vision!")				
	loop "config", "menus", "language", "data" and "shop":
		save yaml "sg.%loop-value-1%"
	set {_sgArenasDir} to new File("plugins/LeafSG/arenas/")
	loop ...{_sgArenasDir}.listFiles():
		add first element of "%loop-value-1.getName()%" split at "." to {_sgArenas::*}
	loop {_sgArenas::*}:
		loop-value-1 != "saves" or "yml" or ""
		load yaml "plugins/LeafSG/arenas/%loop-value-1%.yml" as "sg.arena.%loop-value-1%"
		if yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%loop-value-1%" and yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%loop-value-1%" is not set:
			set yaml value "STATE" from "sg.arena.%loop-value-1%" to "SETUP"
			broadcast "{@setup-prefix}&aRegion for arena %loop-value-1% is not set!"
		yaml value "STATE" from "sg.arena.%loop-value-1%" is "READY"
		add loop-value-1 to {-sg::cache::arenas::*}
	#Storage
	if yaml value "MySQL.Enabled" from "sg.config" is true:
		set {SG-DB} to the database "mysql://%yaml value ""MySQL.Host"" from ""sg.config""%:%yaml value ""MySQL.Port"" from ""sg.config""%/%yaml value ""MySQL.Database"" from ""sg.config""%?user=%yaml value ""MySQL.Username"" from ""sg.config""%&password=%yaml value ""MySQL.Password"" from ""sg.config""%&useSSL=%yaml value ""MySQL.Use_ssl"" from ""sg.config""%"
		execute unsafe "CREATE TABLE IF NOT EXISTS `%yaml value ""MySQL.Tablename"" from ""sg.config""%`(id INTEGER NOT NULL AUTO_INCREMENT, uuid VARCHAR(36) UNIQUE, username VARCHAR(16), PRIMARY KEY (id))" in {SG-DB}
	if yaml value "MySQL.Enabled" from "sg.config" is false:
		set {SG-DB} to the database "jdbc:sqlite:plugins/LeafSG/database.db"	
		execute unsafe "CREATE TABLE IF NOT EXISTS `%yaml value ""MySQL.Tablename"" from ""sg.config""%`(uuid VARCHAR(36) UNIQUE, username VARCHAR(16) UNIQUE)" in {SG-DB}	
	loop "SomeCosmetic.Selected", "ArrowTrails.Selected" and "Spectator.Speed":
		execute unsafe "ALTER TABLE %yaml value ""MySQL.Tablename"" from ""sg.config""% ADD COLUMN `%loop-value-1%` varchar( 255 ) DEFAULT 0" in {SG-DB}		
	execute unsafe "ALTER TABLE %yaml value ""MySQL.Tablename"" from ""sg.config""% ADD COLUMN `Spectator.Night-Vision` varchar( 100 ) DEFAULT true" in {SG-DB}		
	execute unsafe "ALTER TABLE %yaml value ""MySQL.Tablename"" from ""sg.config""% ADD COLUMN `SomeCosmetic.Bought` varchar( 1000 ) DEFAULT 0" in {SG-DB}
	execute unsafe "ALTER TABLE %yaml value ""MySQL.Tablename"" from ""sg.config""% ADD COLUMN `ArrowTrails.Bought` varchar( 1000 ) DEFAULT 0" in {SG-DB}	
	loop "coins", "kills", "wins", "deaths", "chests" and "playedgames":
		execute unsafe "ALTER TABLE %yaml value ""MySQL.Tablename"" from ""sg.config""% ADD COLUMN `%loop-value-1%` int( 255 ) DEFAULT 0" in {SG-DB}
	#Storage	
	
	send "&8&l| &3&l-------------------------------------------- &8&l|" to console
	send " " to console
	send "&aLoading &ev.{@plugin-version}&a..." to console
	send "&e%size of {-sg::cache::arenas::*}% &agames loaded!" to console
	broadcast "&a&nPlugin loaded!"
	send " " to console
	send "&8&l| &3&l-------------------------------------------- &8&l|" to console
	delete {-sg::cache::player::*}
	loop yaml list "Blocks.Allowed-To-Place" from "sg.config":
		set {_item} to "%loop-value-1%" parsed as material
		{_item} is set:
			add {_item} to {-sg::allowed-to-place::*}
		else:
			send "&aBlock %{_item}% from Blocks Allowed-To-Place (config.yml) %loop-value-1% is invalid!" to console
	loop yaml list "Blocks.Allowed-To-Break" from "sg.config":
		set {_item} to "%loop-value-1%" parsed as material
		{_item} is set:
			add {_item} to {-sg::allowed-to-break::*}
		else:
			send "&aBlock %{_item}% from Blocks Allowed-To-Break (config.yml) %loop-value-1% is invalid!" to console			
	loop yaml nodes with keys "Chests" from "sg.config":		
		loop yaml list "Chests.%loop-value-1%.Items" from "sg.config":
			set {_item} to loop-value-2
			{_item} parsed as material is set:
				add {_item} parsed as material to {-sg::cache::chests::%loop-value-1%::*}
			else:
				send "&aItem %{_item}% from chest %loop-value-1% is invalid!" to console
	set {-sg::cache::TitleManager} to Bukkit.getServer().getPluginManager().getPlugin("TitleManager")
	loop {_players::*}:
		sg_join_lobby(loop-value-1)
		wait a tick
	loop {-sg::cache::arenas::*}:
		delete {-sg::cache::arena::%loop-value-1%::players::alive::*} and {-sg::cache::arena::%loop-value-1%::players::spec::*}
		sg_resetarena(loop-value-1)
		wait a second		
	sg_update_leaderboards()

on unload:
	send "&8&l| &3&l-------------------------------------------- &8&l|" to console
	send " " to console
	send "&aDisabling &ev.{@plugin-version}&a..." to console
	send "&ev.{@plugin-version} &adisabled!" to console
	send " " to console
	send "&8&l| &3&l-------------------------------------------- &8&l|" to console

on quit:
	if {-sg::cache::player::%player%::state} is set:
		sg_leave(player, true)
	if {-sg::cache::player::%player%::joining} is set:
		delete {-sg::cache::player::%player%::joining}			

