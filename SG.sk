import:
	java.io.File
	org.bukkit.Bukkit	
	org.bukkit.Sound	
	org.bukkit.Material		
	org.bukkit.material.MaterialData	 		
	com.leaf.nbt.nbtapi.NBTItem
	com.leaf.nbt.nbtapi.NBTEntity	
	com.leaf.nbt.nbtapi.NBTContainer	
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType	
	org.bukkit.event.player.PlayerInteractEvent
	org.bukkit.event.player.PlayerArmorStandManipulateEvent	
	
options:

	#do not touch this -_-
	plugin-version: 1.0.0

expression %item% with [custom] nbt %string%:
	return type: item
	get:
		if expr-1 = air:
			return
		set {_nbti} to new NBTItem(expr-1)
		{_nbti}.mergeCompound(new NBTContainer(expr-2))
		return {_nbti}.getItem()
		
#From https://forums.skunity.com/resources/mirrorutils.706/ by EWS
local expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}	

local effect [leaf] hide %player% from %player%:
	trigger:
		expr-2.hidePlayer(expr-1)

local effect [leaf] show %player% to %player%:
	trigger:
		expr-2.showPlayer(expr-1)
										
command sg [<text = help>] [<text>] [<text>] [<number>]:
	aliases: QuickSG, SurvivalGames, HungerGames
	executable by: players
	trigger:
		if arg-1 is "help": 
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			send "&a/sg list"
			send "&a/sg join &8(&7arena_name&8)"		
			send "&a/sg autojoin"
			send "&a/sg leave"
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			if player has permission "QSG.admin":	
				send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player	
				send "&e/sg start"			
				send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player								
				send "&e/sg setLobby"					
				send "&e/sg setWaitingLobby &8(&7arena_name&8)"	
				send "&e/sg createArena &8(&7arena_name&8)"								
				send "&e/sg setArenaCenter &8(&7arena_name&8)"							
				send "&e/sg addSpawn &8(&7arena_name&8)"		
				send "&e/sg setpos &8(&7arena_name&8) &8(&71|2&8)"					
				send "&e/sg removeSpawn &8(&7arena_name&8)"																																						
				send "&e/sg saveArena &8(&7arena_name&8)"							
				send "&e/sg deleteArena &8(&7arena_name&8)"
				send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
				stop
		if arg-1 is "join":		
			sg_join(player, arg-2)
		if arg-1 is "list":		
			if {-sg::cache::player::%player%::state} is not set:	
				open chest inventory with 6 rows named yaml value "Menus.Arena-Browser.Menu" from "leaf.sg.config" to player
				wait a tick	
				set {_slot} to 10						
				loop {-sg::cache::arenas::*}:
					set {_item} to green clay named replacer "{arena}" with loop-value-1 in yaml value "Menus.Arena-Browser.Name" from "leaf.sg.config"
					set {_lore::*} to yaml list "Menus.Arena-Browser.Lore" from "leaf.sg.config"
					replace all "{status}" with yaml value "Settings.StatusFormat.%{-sg::cache::arena::%loop-value%::status}%" from "leaf.sg.config" in {_lore::*}
					replace all "{playing}" with "%size of {-sg::cache::arena::%loop-value%::ninjas::*}%" in {_lore::*}																	
					make a gui slot {_slot} of player with {_item} with lore colored {_lore::*} to run function sg_join(player, loop-value-1)
					add 1 to {_slot}
					if {_slot} is 17 or 26 or 35:
						add 2 to {_slot}
				make a gui slot 49 of player with {-sg::cache::Items::AutoJoin} to run function sg_findarena(player)				
		if arg-1 is "stats":		
			if {-sg::cache::player::%player%::state} is not set:	
				open chest inventory with 1 rows named yaml value "Menus.Stats.Menu" from "leaf.sg.config" to player
				wait a tick									
				set {_lore::*} to yaml list "Menus.Stats.Lore" from "leaf.sg.config"
				loop "PlayedGames", "Wins", "Kills" and "Deaths":
					set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.sg.playerdata.%uuid of player%"
					replace all "{%loop-value-1%}" with "%{_int}%" in {_lore::*}
				make a gui slot 4 of player with paper named yaml value "Menus.Stats.Name" from "leaf.sg.config" with lore colored {_lore::*} to do nothing							
		if arg-1 is "leave":
			if {-sg::cache::player::%player%::state} is set:	
				sg_leave(player)
		if arg-1 is "autojoin":		
			if {-sg::cache::player::%player%::state} is not set:
				sg_findarena(player)
		if arg-1 is "createArena":	
			if player has permission "QSG.admin":		
				if arg-2 is set:
					if yaml value "%arg-2%.State" from "leaf.sg.arenas" is not set:
						set yaml value "%arg-2%.State" from "leaf.sg.arenas" to "created"
						send "&c⚙&8〉&aArena &c%arg-2% &ahas been created!"
						set yaml value "%arg-2%.Settings.MinPlayers" from "leaf.sg.arenas" to 2
						save yaml "leaf.sg.arenas"
					else:
						send "&aThis arena already exists!"	
				else:
					send "&aSpecify Arena!"		
		if arg-1 is "setPos" or "setPosition":
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas"  is "created" or "ready":
					if arg-3 is "1" or "2":
						set yaml value "%arg-2%.Position.%arg-3%" from "leaf.sg.arenas" to location of player
						send "&7⚙&e〉&aPosition &3%arg-3% &afor Map &3%arg-2% &ahas been set!"
					else:
						send "&7⚙&e〉&a1 or 2!" 
				else:
					send "&cMap not found."	
		if arg-1 is "setChestType":
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas"  is "created" or "ready":
					if yaml value "Chests.%arg-3%" from "leaf.sg.config" is set:
						if target block is chest or trapped chest:
							loop yaml list "%arg-2%.Settings.Chests.%arg-3%" from "leaf.sg.arenas":
								location of target block is loop-value-1:
									send "&7⚙&e〉&aThis chest is already set %arg-3%!"  
									stop
							add location of target block to yaml list "%arg-2%.Settings.Chests.%arg-3%" from "leaf.sg.arenas"
							set yaml value "%arg-2%.Position.%arg-3%" from "leaf.sg.arenas" to location of player
							send "&7⚙&e〉&aChest Type set to %arg-3%!"
							save yaml "leaf.sg.arenas"
						else:
							send "&aInvalid block, you need to look at a chest."
					else:
						send "&7⚙&e〉&aInvalid chest type!" 
				else:
					send "&cMap not found."																														
		if arg-1 is "addSpawn":
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is "created" or "ready":
					set {_id} to size of yaml nodes with keys "%arg-2%.Spawn" from "leaf.sg.arenas"
					set yaml value "%arg-2%.Spawn.%{_id}%" from "leaf.sg.arenas" to location of player
					send "&c⚙&8〉&aSpawn(&c%{_id}%&a) on Arena &3%arg-2% &ahas been set!"			
					save yaml "leaf.sg.arenas"			
				else:
					send "&c⚙&8〉&c⚙&8〉Arena not found, please check the name."	
		if arg-1 is "removeSpawn":
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is "created" or "ready":
					set {_id} to size of yaml nodes with keys "%arg-2%.Spawn" from "leaf.sg.arenas"
					delete yaml value "%arg-2%.Spawn.%{_id}%" from "leaf.sg.arenas"
					send "&cSpawn(%{_id}%) on Arena &3%arg-2% &ahas been removed!"			
					save yaml "leaf.sg.arenas"			
				else:
					send "&c⚙&8〉Arena not found, please check the name."																																										
		if arg-1 is "setWaitingLobby":
			if player has permission "QSG.admin":		
				set yaml value "Locations.WaitingLobby" from "leaf.sg.config" to location of player
				save yaml "leaf.sg.config"
				send "&c⚙&8〉&aWaiting Lobby &ahas been set!"				
		if arg-1 is "setArenaCenter":
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is "created" or "ready":
					set yaml value "%arg-2%.Center" from "leaf.sg.arenas" to location of player
					send "&c⚙&8〉&aCenter for Arena &3%arg-2% &ahas been set!"
					save yaml "leaf.sg.arenas"						
				else:
					send "&c⚙&8〉&c⚙&8〉Arena not found, please check the name."																																			
		if arg-1 is "setLobby":	
			if player has permission "QSG.admin":
				set yaml value "Locations.MainLobby" from "leaf.sg.config" to location of player
				save yaml "leaf.sg.config"
				send "&c⚙&8〉&aLobby set."																								
		if arg-1 is "start":
			if player has permission "QSG.admin":
				if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "WAITING" or "STARTING":
					sg_start({-sg::cache::player::%player%::arena})
		if arg-1 is "reload":		
			if player has permission "QSG.admin":
				broadcast "&c⚙&8〉&aReloading..."
				wait a tick
				make console execute command "sk reload %script%"
		if arg-1 is "saveArena":	
			if player has permission "QSG.admin":	
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is "ready":
					send "&c⚙&8〉&aThis arena is already created, saving the changes and the map if there's any..." 
					save schematic "plugins/QSurvivalGames/maps/%arg-2%.schem" from yaml value "%arg-2%.Position.1" from "leaf.sg.arenas" and yaml value "%arg-2%.Position.2" from "leaf.sg.arenas"
					save yaml "leaf.sg.arenas"
					stop			
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is "created":							
					if yaml value "%arg-2%.Settings.MinPlayers" from "leaf.sg.arenas" is set:	
						if yaml value "%arg-2%.Position.1" from "leaf.sg.arenas" is set:
							if yaml value "%arg-2%.Position.2" from "leaf.sg.arenas" is set:
								set yaml value "%arg-2%.Settings.MaxPlayers" from "leaf.sg.arenas" to size of yaml nodes with keys "%arg-2%.Spawn" from "leaf.sg.arenas"								
								set yaml value "%arg-2%.State" from "leaf.sg.arenas" to "ready"
								add arg-2 to {-sg::cache::arenas::*}
								send "&c⚙&8〉&aArena &c%arg-2% &ahas been saved"
								save yaml "leaf.sg.arenas"
								save schematic "plugins/QSurvivalGames/maps/%arg-2%.schem" from yaml value "%arg-2%.Position.1" from "leaf.sg.arenas" and yaml value "%arg-2%.Position.2" from "leaf.sg.arenas"
								wait a second
								sg_resetarena(arg-2)
							else:
								send "&7⚙&e〉&aPosition 2 is not set!"								
						else:
							send "&7⚙&e〉&aPosition 1 is not set!" 																																																																															
					else:
						send "&c⚙&8〉&aMin players not set!"																																																				
				else:
					send "&c⚙&8〉&c⚙&8〉Arena not found, please check the name.."
		if arg-1 is "debug":	
			if player has permission "QSG.admin":
				send "&fArena: &a%{-sg::cache::player::%player%::arena}%"	
				send "&fStatus: &a%{-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status}%"	
				send "&fPlayers: &a%size of {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::ninjas::*}%"	
		if arg-1 is "deleteArena":	
			if player has permission "QSG.admin":		
				if yaml value "%arg-2%.State" from "leaf.sg.arenas" is set:
					sg_resetarena(arg-2)
					delete yaml value arg-2 from "leaf.sg.arenas"					
					remove arg-2 from {-sg::cache::arenas::*}
					send "&aArena &c%arg-2% &ahas been deleted."
					save yaml "leaf.sg.arenas"
				else:
					send "&c⚙&8〉Arena not found, please check the name."
	
function sg_check_yaml(dir: text, value: text, set: text, type: text = "text"):
	yaml value {_value} from "leaf.sg.%{_dir}%" is not set:
		if {_type} is "text":
			set yaml value {_value} from "leaf.sg.%{_dir}%" to {_set}
		if {_type} is "number":
			set yaml value {_value} from "leaf.sg.%{_dir}%" to {_set} parsed as number
		if {_type} is "boolean":
			set yaml value {_value} from "leaf.sg.%{_dir}%" to {_set} parsed as boolean
	if {_type} is "list":
		yaml list {_value} from "leaf.sg.%{_dir}%" is not set
		loop {_set} split at "||":
			add loop-value to yaml list {_value} from "leaf.sg.%{_dir}%"
				
on load:
	loop currently loaded yaml files:
		loop-value contains "leaf.sg.config" or "leaf.sg.arenas" or "leaf.sg.playerdata"
		unload yaml loop-value-1
	loop all players:
		sg_stats(loop-value-1, "check")
		if {-sg::cache::player::%loop-value-1%::state} is set:
			add loop-value-1 to {_players::*}	
	delete {-sg::cache::*}			
	loop "config" and "arenas":
		load yaml "plugins/QSurvivalGames/%loop-value-1%.yml" as "leaf.sg.%loop-value-1%"	
	sg_check_yaml("config", "Settings.ChatFormat.Lobby", "&a{Wins} &8✦ &7{player} &8» &7{message}")	
	sg_check_yaml("config", "Settings.ChatFormat.Game", "&7{player} &8» &7{message}")								
	sg_check_yaml("config", "Settings.Items.Leave.Item", "magma cream")		
	sg_check_yaml("config", "Settings.Items.Leave.Name", "&cLeave the game")	
	sg_check_yaml("config", "Settings.Items.Leave.Slot", "8", "number")					
	sg_check_yaml("config", "Settings.Timers.In-Lobby", "30", "number")		
	sg_check_yaml("config", "Settings.Timers.In-Game", "10", "number")	
	sg_check_yaml("config", "Settings.StatusFormat.WAITING", "&aWaiting...")	
	sg_check_yaml("config", "Settings.StatusFormat.STARTING", "&6Starting...")		
	sg_check_yaml("config", "Settings.StatusFormat.IN-GAME", "&cIn Game")	
	sg_check_yaml("config", "Settings.StatusFormat.RESTARTING", "&cRestarting...")		
	sg_check_yaml("config", "Settings.Commands.Kill", "mysterydust add {player} 5 msg=false")		
	sg_check_yaml("config", "Settings.Commands.Win", "mysterydust add {player} 50 msg=false")		
	sg_check_yaml("config", "Settings.ShowPremiumInConsole", "true", "boolean")		
	sg_check_yaml("config", "Chests.Default.Min-Items", "5", "number")
	sg_check_yaml("config", "Chests.Default.Max-Items", "8", "number")
	sg_check_yaml("config", "Chests.Default.Items", "1 carrot plant||1 pumpkin pie||1 raw porkchop||1 raw chicken||1 cookie||1 cooked fish||1 stone sword||1 wooden sword||1 stone axe||1 wooden axe||1 fishing rod||1 bow||5 arrows||1 iron ingot||1 gold ingot||1 flint||1 stick||1 feather||1 leather helmet||1 leather chestplate||1 leather leggings||1 leather boots", "list")	
	sg_check_yaml("config", "Chests.TIER-2.Min-Items", "5", "number")
	sg_check_yaml("config", "Chests.TIER-2.Max-Items", "8", "number")
	sg_check_yaml("config", "Chests.TIER-2.Items", "1 stone sword||1 diamond||1 carrot||1 golden apple||1 flint and steel||1 bread||1 baked potato||1 cooked beef||1 cooked porkchop||1 cooked chicken||1 iron helmet||1 iron chestplate||1 iron leggings||1 iron boots||1 chainmail helmet||1 chainmail chestplate||1 chainmail leggings||1 chainmail boots||1 golden helmet||1 golden chestplate||1 golden leggings||1 golden boots||1 bow||5 arrows", "list")												
	sg_check_yaml("config", "Menus.Arena-Browser.Menu", "&8» &7SurvivalGames Arenas")	
	sg_check_yaml("config", "Menus.Arena-Browser.Name", "&8» &7Arena: &e{arena} &7⤵")	
	sg_check_yaml("config", "Menus.Arena-Browser.Lore", "&8︼︼︼︼︼︼︼︼︼︼︼︼||||&8➥ &bStatus: &e{status}||&8➥ &bPlaying: &e{playing}||||&8︻︻︻︻︻︻︻︻︻︻︻︻", "list")
	sg_check_yaml("config", "Menus.Arena-Browser.AutoJoin.Name", "&8▪ &eAutoJoin &8▪")	
	sg_check_yaml("config", "Menus.Arena-Browser.AutoJoin.Item", "beacon")		
	sg_check_yaml("config", "Menus.Stats.Menu", "&8︼︼ &7SurvivalGames Stats &8︼︼")	
	sg_check_yaml("config", "Menus.Stats.Name", "&8➭ &e&nYour Stats&r")	
	sg_check_yaml("config", "Menus.Stats.Lore", "||&8♦ &7PlayedGames &a{PlayedGames}||&8♦ &7Wins &a{Wins}||&8♦ &7Kills &a{Kills}||&8♦ &7Deaths &a{Deaths}", "list")			
	sg_check_yaml("config", "Scoreboard.Waiting.Name", "&eSurvivalGames")	
	sg_check_yaml("config", "Scoreboard.Waiting.WAITING", "&aWaiting for players...")	
	sg_check_yaml("config", "Scoreboard.Waiting.STARTING", "&aStarting in: &7{seconds}...")		
	sg_check_yaml("config", "Scoreboard.Waiting.Lines", "&7{now}||||&8♦ &fArena: &a{arena}||||&8♦ &fPlayers: &a{players}/{maxplayers}||||{status}||||&b㋡ &e&nMC.SERVER.NET&r &b㋡", "list")
	sg_check_yaml("config", "Scoreboard.Game.Name", "&eSurvivalGames") 	
	sg_check_yaml("config", "Scoreboard.Game.Lines", "&7{now}||||&7➥ &fYour Stats ⤵||||&8▪ &3Kills: &a{kills}||||&7➥ &fGame Time&r: ⤵||&8▪ &a{gametime}||||&7➥ &fPlayers ⤵||||&8▪ &3Playing&r: &a{playing}||&8▪ &3Watching&r: &a{watching}||||&eplay.my-cool-server.net", "list")		
	sg_check_yaml("config", "Messages.Join", "&7{player} &ejoined.")	
	sg_check_yaml("config", "Messages.Leave", "&7{player} &eleft.")
	sg_check_yaml("config", "Messages.Death", "&c➜ &a{victim} &7died")	
	sg_check_yaml("config", "Messages.Killed", "&c➜ &a{victim} &7was killed by &a{killer}")		
	sg_check_yaml("config", "Messages.Starting", "&eThe game starts in &a{seconds} &eseconds")	
	sg_check_yaml("config", "Messages.Deathmatch", "&eThe deathmatch starts in &a{seconds} &eseconds")		
	sg_check_yaml("config", "Messages.AlreadyPlaying", "&eYou are already playing!")	
	sg_check_yaml("config", "Messages.Arena.Full", "&cThis arena is full of players.")		
	sg_check_yaml("config", "Messages.Arena.Running", "&cThis arena is IN-GAME.")	
	sg_check_yaml("config", "Messages.Arena.Invalid", "&cThis arena is invalid.")	
	sg_check_yaml("config", "Messages.Summary", "&a︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼||||&e✦ &6SurvivalGames &e✦||||&7Winner &8➭ {player}||||&a︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻", "list")			
	loop "config" and "arenas":		
		save yaml "leaf.sg.%loop-value-1%"	
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aLoading &ev.{@plugin-version}&a..." to console
	broadcast "&c⚙&8〉&a&aSurvivalGames loaded!"
	if yaml value "Settings.ShowPremiumInConsole" from "leaf.sg.config" is true:
		send "&aThank you for using QSurvivalGames if you enjoy it please consider the premium version." to console
		send "&6https://bit.ly/3dKdb5h &aThank you!" to console	
		send "&aThis message can be disabled in config." to console		
	send " " to console
	send "&7&l--------------------------------------------" to console
	loop yaml nodes with keys "" from "leaf.sg.arenas":
		if yaml value "%loop-value-1%.State" from "leaf.sg.arenas" is "ready":
			add loop-value-1 to {-sg::cache::arenas::*}
			set {-sg::cache::arena::%loop-value-1%::status} to "RESTARTING"
	set {-sg::cache::Items::Leave} to yaml value "Settings.Items.Leave.Item" from "leaf.sg.config" parsed as material named yaml value "Settings.Items.Leave.Name" from "leaf.sg.config"	
	set {-sg::cache::Items::AutoJoin} to yaml value "Menus.Arena-Browser.AutoJoin.Item" from "leaf.sg.config" parsed as material named yaml value "Menus.Arena-Browser.AutoJoin.Name" from "leaf.sg.config"
	set {-sg::cache::SB::*} to  "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f"
	loop yaml nodes with keys "Chests" from "leaf.sg.config":		
		loop yaml list "Chests.%loop-value-1%.Items" from "leaf.sg.config":
			set {_item} to loop-value-2
			{_item} parsed as material is set:
				add {_item} parsed as material to {-sg::cache::chests::%loop-value-1%::*}
			else:
				send "&aItem %{_item}% from chest %loop-value-1% is invalid!" to console	
	if yaml value "Locations.MainLobby" from "leaf.sg.config" is not set:
		broadcast "&c⚙&8〉&a&cSurvivalGames Main lobby is not set!."	
	loop {_players::*}:
		delete metadata value "SG_DEAD" of loop-value-1
		delete metadata value "SG_KILLER" of loop-value-1
		teleport loop-value-1 to yaml value "Locations.MainLobby" from "leaf.sg.config"
	save "leaf.sg.arenas"	
	loop {-sg::cache::arenas::*}:		
		sg_resetarena(loop-value-1)		
		wait a second		
	stop			
	#Converting Arenas.
	set {_sgArenasDir} to new File("plugins/LeafSG/arenas/")
	loop ...{_sgArenasDir}.listFiles():
		add first element of "%loop-value-1.getName()%" split at "." to {_sgArenas::*}
	loop {_sgArenas::*}:
		loop-value-1 != "saves" or "yml" or ""
		load yaml "plugins/LeafSG/arenas/%loop-value-1%.yml" as "sg.arena.%loop-value-1%"
		yaml value "STATE" from "sg.arena.%loop-value-1%" is "READY"
		set {_arena} to loop-value-1
		set yaml value "%{_arena}%.State" from "leaf.sg.arenas" to "ready"		
		set yaml value "%{_arena}%.Position.1" from "leaf.sg.arenas" to yaml value "LOCATION.ARENA-POS.1" from "sg.arena.%{_arena}%"
		set yaml value "%{_arena}%.Position.2" from "leaf.sg.arenas" to yaml value "LOCATION.ARENA-POS.2" from "sg.arena.%{_arena}%"
		set yaml value "%{_arena}%.Center" from "leaf.sg.arenas" to yaml value "LOCATION.CENTER" from "sg.arena.%{_arena}%"
		set yaml value "%{_arena}%.Settings.MinPlayers" from "leaf.sg.arenas" to yaml value "MIN-PLAYERS" from "sg.arena.%{_arena}%"			
		set yaml value "%{_arena}%.Settings.MaxPlayers" from "leaf.sg.arenas" to yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%"
		loop yaml value "MAX-PLAYERS" from "sg.arena.%{_arena}%" times:
			set yaml value "%{_arena}%.Spawn.%loop-value-2%" from "leaf.sg.arenas" to yaml value "SPAWNPOINTS.%loop-value-2%" from "sg.arena.%{_arena}%"		
		add loop-value-1 to {-sg::cache::arenas::*}
	loop {-sg::cache::arenas::*}:
		save schematic "plugins/QSurvivalGames/maps/%loop-value-1%.schem" from yaml value "%loop-value-1%.Position.1" from "leaf.sg.arenas" and yaml value "%loop-value-1%.Position.2" from "leaf.sg.arenas"
	save "leaf.sg.arenas"

on unload:
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aDisabling &ev.{@plugin-version}&a..." to console
	send "&ev.{@plugin-version} &adisabled!" to console
	send " " to console
	send "&7&l--------------------------------------------" to console

function sg_stats(p: player, do: text, type: text = "check", amount: number = 1):
	if yaml "leaf.sg.playerdata.%uuid of {_p}%" is not loaded:
		load yaml "plugins/QSurvivalGames/playerdata/%uuid of {_p}%.yml" as "leaf.sg.playerdata.%uuid of {_p}%"	
	{_do} is "check":
		loop "PlayedGames", "Wins", "Kills" and "Deaths":
			if yaml value "Stats.%loop-value-1%" from "leaf.sg.playerdata.%uuid of {_p}%" is not set:
				set yaml value "Stats.%loop-value-1%" from "leaf.sg.playerdata.%uuid of {_p}%" to 0
	{_do} is "add":
		set yaml value "Stats.%{_type}%" from "leaf.sg.playerdata.%uuid of {_p}%" to yaml value "Stats.%{_type}%" from "leaf.sg.playerdata.%uuid of {_p}%" + {_amount}
	save yaml "leaf.sg.playerdata.%uuid of {_p}%"

function sg_findarena(p: player):
	loop {-sg::cache::arenas::*}:
		if {-sg::cache::arena::%loop-value-1%::status} is "WAITING" or "STARTING":
			if {-sg::cache::player::%{_p}%::state} is not set:
				sg_join({_p}, loop-value-1)
				stop

function sg_tab_list(p: player):
	if {-sg::cache::player::%{_p}%::state} is set:
		loop all players:
			if {-sg::cache::player::%loop-value-1%::arena} is {-sg::cache::player::%{_p}%::arena}:
				leaf show loop-value-1 to {_p}
				leaf show {_p} to loop-value-1
			else:
				leaf hide loop-value-1 from {_p}
				leaf hide {_p} from loop-value-1
	if {-sg::cache::player::%{_p}%::state} is not set:	
		loop all players:
			if {-sg::cache::player::%loop-value-1%::state} is set:	
				leaf hide loop-value-1 from {_p}
				leaf hide {_p} from loop-value-1
			else:
				loop-value-1's world is {_p}'s world
				leaf show loop-value-1 to {_p}
				leaf show {_p} to loop-value-1	
						
function sg_leave(p: player):
	if {-sg::cache::player::%{_p}%::state} is set:
		if {-sg::cache::player::%{_p}%::state} is "IN-GAME":		
			sg_remove_from_game({_p})
			send replacer "{player}" with {_p}'s display name in yaml value "Messages.Leave" from "leaf.sg.config" to {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::ninjas::*}	
		delete {-sg::cache::player::%{_p}%::*}	
		sg_clear_player({_p})
		delete scoreboard of {_p}
		teleport {_p} to yaml value "Locations.MainLobby" from "leaf.sg.config"
		sg_tab_list({_p})		
		
function sg_join(p: player, arena: text):	
	if {-sg::cache::player::%{_p}%::state} is not set:
		if yaml value "%{_arena}%.State" from "leaf.sg.arenas" is "ready":
			if {-sg::cache::arena::%{_arena}%::status} is "WAITING" or "STARTING":
				if size of {-sg::cache::arena::%{_arena}%::ninjas::*} < yaml value "%{_arena}%.Settings.MaxPlayers" from "leaf.sg.arenas":
					sg_clear_player({_p})
					set {-sg::cache::player::%{_p}%::state} to "IN-GAME"
					set {-sg::cache::player::%{_p}%::arena} to {_arena}
					add {_p} to {-sg::cache::arena::%{_arena}%::ninjas::*}	
					teleport {_p} to yaml value "Locations.WaitingLobby" from "leaf.sg.config"
					sg_createBoard({_p}, "SG-WAITING")					
					set slot yaml value "Settings.Items.Leave.Slot" from "leaf.sg.config" of {_p} to {-sg::cache::Items::Leave}	
					if size of {-sg::cache::arena::%{_arena}%::ninjas::*} = yaml value "%{_arena}%.Settings.MinPlayers" from "leaf.sg.arenas":
						sg_start_countdown({_arena})											
					send replacer "{player}" and "{players-count}" with {_p}'s display name and "%size of {-sg::cache::arena::%{_arena}%::ninjas::*}%" in yaml value "Messages.Join" from "leaf.sg.config" to {-sg::cache::arena::%{_arena}%::ninjas::*}
					delete metadata value "SG_DEAD" of {_p}
					delete metadata value "SG_KILLER" of {_p}
					sg_tab_list({_p})						
				else:
					send yaml value "Messages.Arena.Full" from "leaf.sg.config" to {_p}
			else:
				send yaml value "Messages.Arena.Running" from "leaf.sg.config" to {_p}
		else:
			send yaml value "Messages.Arena.Invalid" from "leaf.sg.config" to {_p}
	else:
		send yaml value "Messages.AlreadyPlaying" from "leaf.sg.config" to {_p}

function sg_play_sound(p: player, soundLegacy: string, soundNew: string):
	if {-sg::cache::sounds::%{_soundLegacy}%} is not set:
		if minecraft version contains "1.8":
			set {-sg::cache::sounds::%{_soundLegacy}%} to Sound..{_soundLegacy}
		else:
			set {-sg::cache::sounds::%{_soundLegacy}%} to Sound..{_soundNew}
	{_p}.playSound(location of {_p}, {-sg::cache::sounds::%{_soundLegacy}%}, 1 and 1)	

function sg_find_spawn(p: player, arena: text):
	loop yaml value "%{_arena}%.Settings.MaxPlayers" from "leaf.sg.arenas" times:
		if {-sg::cache::arena::%{_arena}%::spawnPoint::%loop-value-1%} is not set:
			teleport {_p} to yaml value "%{_arena}%.Spawn.%loop-value-1%" from "leaf.sg.arenas"
			sg_freeze({_p}, yaml value "%{_arena}%.Spawn.%loop-value-1%" from "leaf.sg.arenas")
			set {-sg::cache::arena::%{_arena}%::spawnPoint::%loop-value-1%} to true
			set {-sg::cache::player::%{_p}%::spawnPoint} to loop-value-1
			stop

function sg_deathmatch(arena: text):
	loop {-sg::cache::arena::%{_arena}%::bad-ninjas::*}:
		teleport loop-value-1 to yaml value "%{_arena}%.Center" from "leaf.sg.arenas"
	set {-sg::cache::arena::%{_arena}%::freeze} to true
	loop {-sg::cache::arena::%{_arena}%::ninjas::*}:
		sg_find_spawn(loop-value-1, {_arena})
		wait a tick
	loop 10 times:
		if {-sg::cache::arena::%{_arena}%::status} is "IN-GAME":
			loop-number is 9 or 8 or 7:
				loop {-sg::cache::arena::%{_arena}%::ninjas::*}:
					leaf send title "&eSurvivalGames" with subtitle "&fThe Deathmatch in &c%10 - loop-number% &fseconds." to loop-value-2 with 5 fadein and 5 fadeout for 30					
		else:
			stop
		wait a second
	loop {-sg::cache::arena::%{_arena}%::ninjas::*}:		
		sg_play_sound(loop-value-1, "LEVEL_UP", "ENTITY_PLAYER_LEVELUP")									
		leaf send title "&eSurvivalGames" with subtitle "&aFight!" to loop-value-1 with 8 fadein and 5 fadeout for 20
	delete {-sg::cache::arena::%{_arena}%::freeze}		

function sg_gametime(arena: text):	
	set {-sg::cache::arena::%{_arena}%::minutes} to 9
	set {-sg::cache::arena::%{_arena}%::seconds} to 60
	while {-sg::cache::arena::%{_arena}%::status} is "IN-GAME":
		remove 1 from {-sg::cache::arena::%{_arena}%::seconds}
		if {-sg::cache::arena::%{_arena}%::seconds} is 0:
			set {-sg::cache::arena::%{_arena}%::seconds} to 59	
			if {-sg::cache::arena::%{_arena}%::minutes} is 1 or 2 or 3:
				send replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::minutes}%" in yaml value "Messages.Deathmatch" from "leaf.sg.config" to {-sg::cache::arena::%{_arena}%::ninjas::*} and {-sg::cache::arena::%{_arena}%::bad-ninjas::*}			
			remove 1 from {-sg::cache::arena::%{_arena}%::minutes}				
		if {-sg::cache::arena::%{_arena}%::minutes} = 0:
			if {-sg::cache::arena::%{_arena}%::seconds} <= 1:	
				if {-sg::cache::arena::%{_arena}%::state} is "DM":
					sg_resetarena({_arena})
					stop
				set {-sg::cache::arena::%{_arena}%::state} to "DM"
				set {-sg::cache::arena::%{_arena}%::minutes} to 3
				set {-sg::cache::arena::%{_arena}%::seconds} to 10			
				sg_deathmatch({_arena})
		wait a second

function sg_start(arena: text):
	set {-sg::cache::arena::%{_arena}%::status} to "IN-GAME"
	loop {-sg::cache::arena::%{_arena}%::ninjas::*}:
		sg_clear_player(loop-value-1)		
		set {-sg::cache::player::%loop-value-1%::GameKills} to 0	
		set metadata value "SG_OWNER" of loop-value-1 to loop-value-1
		sg_createBoard(loop-value-1, "SG-GAME")
		sg_stats(loop-value-1, "add", "PlayedGames")	
		sg_find_spawn(loop-value-1, {_arena})
		wait a tick	
	set {-sg::cache::arena::%{_arena}%::seconds} to 9
	loop 10 times:	
		loop {-sg::cache::arena::%{_arena}%::ninjas::*}:
			set {_title} to ""
			set {_subtitle} to ""
			if loop-number = 2:
				leaf send title "&eSurvivalGames" with subtitle "&fThe Game Starts in &c10 &fseconds." to loop-value-2 with 5 fadein and 5 fadeout for 30	
			if loop-number = 4:
				leaf send title "&eSurvivalGames" with subtitle "&fBe the &eLast Team &fstanding!" to loop-value-2 with 5 fadein and 5 fadeout for 30				
			if loop-number = 7:
				set {_title} to "&c&n3"		
			if loop-number = 8:
				set {_title} to "&6&n2"		
			if loop-number = 9:
				set {_title} to "&e&n1"	
			if loop-number = 10:
				set {_title} to "&aFight!"		
				sg_play_sound(loop-value-2, "LEVEL_UP", "ENTITY_PLAYER_LEVELUP")
				delete {-sg::cache::arena::%{_arena}%::freeze}
			else:
				sg_play_sound(loop-value-2, "NOTE_BASS", "BLOCK_NOTE_BLOCK_BASS")			
			loop-number != 2 or 3 or 4 or 5										
			leaf send title {_title} with subtitle {_subtitle} to loop-value-2 with 0 fadein and 0 fadeout for 20
		if {-sg::cache::arena::%{_arena}%::seconds} > 0:
			remove 1 from {-sg::cache::arena::%{_arena}%::seconds}		
		wait a second	
	sg_gametime({_arena})			

function sg_chest_fill(loc: location, arena: text):
	clear inventory of block at {_loc}
	set {_count} to 1 	
	#Double chest check.
	loop all blocks in radius 1 of {_loc}:
		if loop-block is chest or trapped chest:
			if loop-block is not block above block at {_loc}:
				if loop-block is not block under block at {_loc}:
					set {_count} to 2
					set {-sg::cache::arena::%{_arena}%::CHEST::%location of loop-block%} to true
	#
	loop yaml nodes with keys "Chests" from "leaf.sg.config":	
		loop yaml list "%{_arena}%.Settings.Chests.%loop-value-1%" from "leaf.sg.arenas": 
			loop-value-2 is {_loc}
			set {_type} to loop-value-1
	if {_type} is not set:
		set {_type} to "Default"		
	set {_items} to a random number between yaml value "Chests.%{_type}%.Min-Items" from "leaf.sg.config"*{_count} and yaml value "Chests.%{_type}%.Max-Items" from "leaf.sg.config"*{_count}	
	if {_count} is 2:
		set {_slots::*} to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 and 53
	else:
		set {_slots::*} to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 and 26
	set {_loot::*} to {-sg::cache::chests::%{_type}%::*}
	loop {_items} times:
		set {_random} to random element out of {_loot::*}
		set {_slot} to a random element out of {_slots::*}
		add {_random} to slot {_slot} of block at {_loc}
		if "%{_random}%" contains "helmet":
			remove leather helmet, iron helmet, chainmail helmet and gold helmet and diamond helmet from {_loot::*}		
		if "%{_random}%" contains "chestplate":
			remove leather chestplate, iron chestplate, chainmail chestplate and gold chestplate and diamond chestplate from {_loot::*}
		if "%{_random}%" contains "leggings":
			remove leather leggings, iron leggings, chainmail leggings and gold leggings and diamond leggings from {_loot::*}		
		if "%{_random}%" contains "boots":
			remove leather boots, iron boots, chainmail boots and gold boots and diamond boots from {_loot::*}
		remove {_slot} from {_slots::*}
		remove {_random} from {_loot::*}	

on join:
	sg_stats(player, "check")

on quit:
	if {-sg::cache::player::%player%::state} is set:
		sg_leave(player)
	unload yaml "leaf.sg.playerdata.%uuid of player%"	

on right click on chest or trapped chest:	
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::CHEST::%location of event-block%} is not set:
			sg_chest_fill(location of event-block, {-sg::cache::player::%player%::arena})
			set {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::CHEST::%location of event-block%} to true

on teleport:
	if {-sg::cache::player::%player%::state} is set:
		"%teleport cause%" is "SPECTATE"
		cancel event	

on break:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME":
			if "%event-block%" contains "leaves":
				stop	
		cancel event	

on place:
	if {-sg::cache::player::%player%::state} is "IN-GAME":	
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop	
		cancel event	

on right click:
	if {-sg::cache::player::%player%::state} is set:
		if event-item is {-sg::cache::Items::Leave}:
			sg_leave(player)	

on inventory click:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop	
		cancel event		
	
on chat:
	if {-sg::cache::player::%player%::state} is set:
		if {-sg::cache::player::%player%::spectator} is true:
			stop
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "STARTING" or "WAITING":
			set {_format} to replacer "{player}" and "{message}" with "%player%" and message in yaml value "Settings.ChatFormat.Lobby" from "leaf.sg.config"
		else:
			set {_format} to replacer "{player}" and "{message}" with "%player%" and message in yaml value "Settings.ChatFormat.Game" from "leaf.sg.config"
		loop "PlayedGames", "Wins", "Kills" and "Deaths":
			set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.sg.playerdata.%uuid of player%"
			replace all "{%loop-value-1%}" with "%{_int}%" in {_format}
		set chat format to {_format}
		set chat recipients to {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::ninjas::*}

on drop:
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop	
		cancel event
		
on command:
	if {-sg::cache::player::%player%::state} is set:
		if full command is "leave":
			sg_leave(player)
			cancel event
		if full command is "menu":
			if {-sg::cache::player::%player%::spectator} is true:
				cancel event			
				sg_menu(player)

on hunger bar change:	
	if {-sg::cache::player::%player%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop
		set player's hunger to 20

function sg_show_blood(p: player):
	if {-sg::cache::player::%{_p}%::state} is set:
		set {_w} to world of {_p}
		set {_loc} to location of {_p}
		set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
		FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})

function sg_freeze(p: player, loc: location):
	while {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::freeze} is true:
		if distance between {_loc} and {_p} > 0.1:
			set yaw of {_loc} to yaw of {_p}
			set pitch of {_loc} to pitch of {_p}
			teleport {_p} to {_loc}	
		wait a tick	

function sg_win(arena: text, p: player):
	set {-sg::cache::arena::%{_arena}%::status} to "RESTARTING"
	loop yaml list "Messages.Summary" from "leaf.sg.config":
		set {_message} to loop-value-1
		replace all "{player}" with "%{_p}%" in {_message}
		send centered colored {_message} to {-sg::cache::arena::%{_arena}%::ninjas::*} and {-sg::cache::arena::%{_arena}%::bad-ninjas::*}
	sg_stats({_p}, "add", "Wins")
	loop yaml list "Settings.Commands.Win" from "leaf.sg.config":
		set {_cmd} to loop-value-2
		replace all "{player}" in {_cmd} with "%{_p}%"
		make console execute command {_cmd}			
	loop 10 times:
		wait a second
	sg_resetarena({_arena})

function sg_menu(p: player):
	open chest inventory with 6 rows named "&7Teleport to a player." to {_p}
	set {_s} to 0
	wait a tick
	loop {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::ninjas::*}:
		set {_player} to loop-value-1
		make a gui slot {_slot} of {_p} with {_player}'s skull named "&a%{_player}%" with lore "&cClick to teleport." to run:
			if {-sg::cache::player::%{_player}%::state} is "IN-GAME":
				teleport {_p} to {_player}
			else:
				close {_p}'s inventory
		add 1 to {_s}

function sg_setspec(p: player):
	set {_p}'s gamemode to spectator
	set {-sg::cache::player::%{_p}%::spectator} to true
	add {_p} to {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::bad-ninjas::*}
	teleport {_p} to a random element out of {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::ninjas::*}
	while {-sg::cache::player::%{_p}%::state} is "IN-GAME":
		leaf send action bar "&eUse /menu to teleport to a player, use /leave to quit." to {_p}
		wait a second

function sg_remove_from_game(p: player):
	set {_arena} to {-sg::cache::player::%{_p}%::arena}
	remove {_p} from {-sg::cache::arena::%{_arena}%::ninjas::*}
	delete {-sg::cache::arena::%{_arena}%::spawnPoint::%{-sg::cache::player::%{_p}%::spawnPoint}%}
	if {-sg::cache::arena::%{_arena}%::status} is "IN-GAME":
		if size of {-sg::cache::arena::%{_arena}%::ninjas::*} is 1:
			sg_win({_arena}, random element out of {-sg::cache::arena::%{_arena}%::ninjas::*})
		if size of {-sg::cache::arena::%{_arena}%::ninjas::*} is 0:
			if {-sg::cache::arena::%{_arena}%::status} is not "RESTARTING":
				sg_resetarena({_arena})	

function sg_player_death(p: player):
	if metadata value "SG_DEAD" of {_p} is set:
		stop
	set {_arena} to {-sg::cache::player::%{_p}%::arena}
	set metadata value "SG_DEAD" of {_p} to true
	sg_clear_player({_p})	
	sg_show_blood({_p})
	set {_killer} to "%metadata value ""SG_KILLER"" of {_p}%" parsed as player
	sg_stats({_p}, "add", "Deaths")
	if {_killer} is set:
		sg_stats({_killer}, "add", "Kills")
		add 1 to {-sg::cache::player::%{_killer}%::GameKills}
		send replacer "{victim}" and "{killer}" with "%{_p}%" and "%{_killer}%" in yaml value "Messages.Killed" from "leaf.sg.config" to {-sg::cache::arena::%{_arena}%::ninjas::*} and {-sg::cache::arena::%{_arena}%::bad-ninjas::*}		
	else:
		send replacer "{victim}" with "%{_p}%" in yaml value "Messages.Death" from "leaf.sg.config" to {-sg::cache::arena::%{_arena}%::ninjas::*} and {-sg::cache::arena::%{_arena}%::bad-ninjas::*}
	loop {-sg::cache::arena::%{_arena}%::ninjas::*}:
		if "%metadata value ""SG_KILLER"" of loop-value-1%" is "%{_p}%":
			delete metadata value "SG_KILLER" of loop-value-1
	loop yaml list "Settings.Commands.Kill" from "leaf.sg.config":
		set {_cmd} to loop-value-1
		replace all "{player}" in {_cmd} with "%{_killer}%"
		make console execute command {_cmd}		
	sg_setspec({_p})					
	sg_remove_from_game({_p})
	
on damage of player:
	if {-sg::cache::player::%victim%::state} is "IN-GAME":
		if {-sg::cache::arena::%{-sg::cache::player::%victim%::arena}%::status} is "STARTING" or "WAITING":
			cancel event
			damage cause is void
			teleport victim to yaml value "Locations.WaitingLobby" from "leaf.sg.config"
		if {-sg::cache::arena::%{-sg::cache::player::%victim%::arena}%::status} is "IN-GAME":
			sg_show_blood(victim)
			set metadata value "SG_KILLER" of victim to metadata value "SG_OWNER" of attacker	
			if damage cause is void:
				cancel event	
				sg_player_death(victim)
				stop						
			if damage >= health of victim:
				cancel event	
				loop all items in victim's inventory:
					drop loop-value-1 at victim's location				
				sg_player_death(victim)
		else:
			cancel event 							

function sg_start_countdown(arena: text):
	set {-sg::cache::arena::%{_arena}%::status} to "STARTING"
	loop {-sg::cache::arena::%{_arena}%::seconds} times:
		if {-sg::cache::arena::%{_arena}%::status} is "STARTING" or "WAITING":
			size of {-sg::cache::arena::%{_arena}%::ninjas::*} >= 2
			remove 1 from {-sg::cache::arena::%{_arena}%::seconds}	
			if {-sg::cache::arena::%{_arena}%::seconds} = 1 or 2 or 3 or 4 or 5 or 10:
				send replacer "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in yaml value "Messages.Starting" from "leaf.sg.config" to {-sg::cache::arena::%{_arena}%::ninjas::*}	
			if {-sg::cache::arena::%{_arena}%::seconds} = 1:
				size of {-sg::cache::arena::%{_arena}%::ninjas::*} >= yaml value "%{_arena}%.Settings.MinPlayers" from "leaf.sg.arenas":
					sg_start({_arena})
				else:
					set {-sg::cache::arena::%{_arena}%::status} to "WAITING"
					set {-sg::cache::arena::%{_arena}%::seconds} to yaml value "Settings.Timers.In-Lobby" from "leaf.sg.config"
			wait a second			
		else:
			stop

function sg_resetarena(arena: text):
	set {-sg::cache::arena::%{_arena}%::status} to "RESTARTING"
	loop {-sg::cache::arena::%{_arena}%::ninjas::*} and {-sg::cache::arena::%{_arena}%::bad-ninjas::*}:
		teleport loop-value-1 to yaml value "Locations.MainLobby" from "leaf.sg.config"
		delete scoreboard of loop-value-1		
		delete {-sg::cache::player::%loop-value-1%::*}			
		sg_clear_player(loop-value-1)	
		sg_tab_list(loop-value-1)
		wait a tick					
	delete {-sg::cache::arena::%{_arena}%::*}	
	set {-sg::cache::arena::%{_arena}%::freeze} to true
	if new File("plugins/QSurvivalGames/maps/%{_arena}%.schem").isFile() is true:
		paste schematic "plugins/QSurvivalGames/maps/%{_arena}%.schem" at yaml value "%{_arena}%.Position.1" from "leaf.sg.arenas"
	wait a second	
	set {-sg::cache::arena::%{_arena}%::minutes} to 0
	set {-sg::cache::arena::%{_arena}%::status} to "WAITING"
	set {-sg::cache::arena::%{_arena}%::seconds} to yaml value "Settings.Timers.In-Lobby" from "leaf.sg.config"
							
function sg_clear_player(p: player):						
	heal {_p}
	extinguish {_p}
	set {_p}'s food to 20	
	set cursor slot of {_p} to air
	set {_p}'s helmet to air	
	set {_p}'s chestplate to air
	set {_p}'s leggings to air
	set {_p}'s boots to air		
	close {_p}'s inventory
	clear {_p}'s inventory	
	clear {_p}'s level
	{_p}.setFlying(false)
	{_p}.setAllowFlight(false)	
	set {_p}'s gamemode to survival
	loop ...{_p}.getActivePotionEffects():
		{_p}.removePotionEffect(loop-value.getType())	
	set velocity of {_p} to new vector 0, 0, 0	

function sg_createBoard(p: player, t: text):
	set {_arena} to {-sg::cache::player::%{_p}%::arena}
	create scoreboard for {_p}
	if {_t} is "SG-WAITING":
		set {_maxPlayers} to yaml value "%{_arena}%.Settings.MaxPlayers" from "leaf.sg.arenas"
		set scoreboard title of {_p} to yaml value "Scoreboard.Waiting.Name" from "leaf.sg.config"
		while {-sg::cache::player::%{_p}%::arena} = {_arena}:	
			if {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::status} = "STARTING" or "WAITING":
				set {_slot} to 1
				set {_status} to yaml value "Scoreboard.Waiting.%{-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::status}%" from "leaf.sg.config"
				loop yaml list "Scoreboard.Waiting.Lines" from "leaf.sg.config":
					set {_value} to "%loop-value-1%"
					replace all "{now}" with "%now%" in {_value}
					replace all "{player}" with {_p}'s display name in {_value}
					replace all "{seconds}" with "%{-sg::cache::arena::%{_arena}%::seconds}%" in {_status}
					replace all "{players}" with "%size of {-sg::cache::arena::%{_arena}%::ninjas::*}%" in {_value}
					replace all "{maxplayers}" with "%{_maxPlayers}%" in {_value}
					replace all "{arena}" with "%{-sg::cache::player::%{_p}%::arena}%" in {_value}
					replace all "{status}" with {_status} in {_value}
					set scoreboard line {_slot} of {_p} to "%{-sg::cache::SB::%{_slot}%}%%colored {_value}%"
					add 1 to {_slot}
			else:
				stop
			wait a second		
	if {_t} is "SG-GAME":
		set scoreboard title of {_p} to yaml value "Scoreboard.Game.Name" from "leaf.sg.config"
		while {-sg::cache::player::%{_p}%::arena} = {_arena}:	
			if {-sg::cache::arena::%{-sg::cache::player::%{_p}%::arena}%::status} is set:	
				if {-sg::cache::arena::%{_arena}%::seconds} <= 9:
					set {_gametime} to "%{-sg::cache::arena::%{_arena}%::minutes}%:0%{-sg::cache::arena::%{_arena}%::seconds}%"
				else:
					set {_gametime} to "%{-sg::cache::arena::%{_arena}%::minutes}%:%{-sg::cache::arena::%{_arena}%::seconds}%"
				set {_slot} to 1 
				loop yaml list "Scoreboard.Game.Lines" from "leaf.sg.config":
					set {_value} to "%loop-value-1%"
					replace all "{now}" with "%now%" in {_value}
					replace all "{player}" with {_p}'s display name in {_value}		
					replace all "{kills}" with "%{-sg::cache::player::%{_p}%::GameKills}%" in {_value}			
					replace all "{playing}" with "%size of {-sg::cache::arena::%{_arena}%::ninjas::*}%" in {_value}	
					replace all "{watching}" with "%size of {-sg::cache::arena::%{_arena}%::bad-ninjas::*}%" in {_value}	
					replace all "{gametime}" with "%{_gametime}%" in {_value}													
					set scoreboard line {_slot} of {_p} to "%{-sg::cache::SB::%{_slot}%}%%colored {_value}%"
					add 1 to {_slot}
			else:
				stop							
			wait a second	
				

#El Psy Kongroo